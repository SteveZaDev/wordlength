let protoWordsArray = [
  { 
    cat: "5-Letter Words",
    sel: true,
    parent: "",
    numOfItems: 0,
    items: ["ABOUT", "THERE", "CLICK", "WORLD", "WHERE", "ORDER", "GAMES", "STORE", "THOSE", "BASED", "BEING", "PAGES", "POWER", "PLACE", "MEDIA", "WHITE", "LEVEL", "SHALL", "VALUE", "STOCK", "TABLE", "MOVIE", "STUDY", "NEVER", "EVERY", "OTHER", "FIRST", "PRICE", "MUSIC", "BOOKS", "ITEMS", "COULD", "TERMS", "USING", "BLACK", "WOMEN", "FOUND", "WHILE", "THINK", "SINCE", "SMALL", "HOURS", "CLASS", "VISIT", "PRESS", "POINT", "START", "MARCH", "STAFF", "USERS", "WHICH", "WOULD", "STATE", "AFTER", "LINKS", "GROUP", "GREAT", "NIGHT", "PHONE", "CHECK", "TODAY", "HOUSE", "THREE", "NORTH", "GUIDE", "TIMES", "IMAGE", "STILL", "TOOLS", "LEARN", "SALES", "MODEL", "AGAIN", "TOPIC", "THEIR", "THESE", "VIDEO", "YEARS", "UNDER", "HOTEL", "LOCAL", "FORUM", "INDEX", "SOUTH", "PHOTO", "TOTAL", "POSTS", "BOARD", "SITES", "TITLE", "MONEY", "REPLY", "PRINT", "LARGE", "HUMAN", "GOING", "BELOW", "ABUSE", "ACHED", "ACTOR", "ADMIT", "ABBEY", "ABHOR", "ABUTS", "ACORN", "ADDED", "ADEPT", "ADOPT", "ADULT", "ABATE", "ABIDE", "ABOUT", "ACIDS", "ACRES", "ADAPT", "ADDER", "ADOBE", "ADORE", "ABBOT", "ABEND", "ABODE", "ABYSS", "ACRID", "ACUTE", "AFFIX", "AFTER", "AGAPE", "AHEAD", "AFOUL", "AGAIN", "AGENT", "AGONY", "AILED", "AGILE", "AISLE", "BADGE", "BAILS", "BAKER", "BACON", "BADLY", "BAKES", "BANAL", "BABKA", "BAGGY", "BAKED", "BANJO", "BALKY", "BASED", "BASIL", "BAWDY", "BEAST", "BEGET", "BEGUN", "BELCH", "BARLY", "BARON", "BEACH", "BEECH", "BEFIT", "BEGIN", "BASIS", "BASES", "BEARD", "BEGAN", "BEIGE", "BASIC", "BATCH", "BATON", "BAYOU", "BEING", "BELCH", "BELLY", "BIRTH", "BITES", "BLADE", "BLANK", "BLAZE", "BLEND", "BLINK", "BLOCK", "BLOOD", "BLUFF", "BLURB", "BOARD", "BONUS", "BOSSY", "BOTCH", "BOXER", "BRAIN", "BRASS", "BRAVO", "BRIEF", "BROOM", "BROWN", "BUDDY", "BUGGY", "BULLY", "BUNKO", "BUTTE", "BUXOM", "CABBY", "CAMEL", "CANDY", "CARRY", "CATER", "CATTY", "CEASE", "CHAMP", "CHARM", "CHECK", "CHICK", "CHIEF", "CHILE", "CHIMP", "CHOKE", "CIDER", "CINCH", "CIRCA", "CIVIL", "CLASS", "CLEAR", "CLEFT", "CLING", "CLOUD", "COAST", "COBRA", "COCOA", "CODEX", "COLOR", "COMET", "CORNY", "COUCH", "COUNT", "COURT", "CRACK", "CRAVE", "CRAZY", "CRISP", "CROOK", "CROWD", "CRYPT", "CURLY", "CURVE", "DADDY", "DAISY", "DALLY", "DATED", "DAZED", "DEALT", "DEBUG", "DECAL", "DECRY", "DEFER", "DEMUR", "DENIM", "DEPOT", "DEREK", "DIARY", "DIETY", "DINES", "DINGY", "DIODE", "DISCO", "DITTO", "DIVOT", "DOLES", "DOYEN", "DRAIN", "DRAPE", "DRESS", "DROLL", "EAGER", "EJECT", "ELDER", "ELUDE", "EMBER", "EMPTY", "ENNUI", "ENSUE", "EQUIP", "EVADE", "EVENT", "EXCEL", "EXTRA", "FABLE", "FACET", "FARCE", "FAUNA", "FEAST", "FETCH", "FIBER", "FIFTH", "FILCH", "FILTH", "FLAKY", "FLINT", "FLOOR", "FLOSS", "FLOWN", "FLUME", "FLUSH", "FOLIO", "FRAME", "FREON", "FRIZZ", "FRONT", "FROTH", "FRUIT", "FUGAL", "FUZZY", "GABBY", "GAFFE", "GALLY", "GAUGE", "GAVEL", "GENUS", "GLARE", "GLEAM", "GLENN", "GLOVE", "GOING", "GOLEM", "GORGE", "GOUGE", "GRADE", "GRAIL", "GRAPH", "GRAZE", "GRIMY", "GRIST", "GROVE", "GRUNT", "GUESS", "GUILD", "GUSTO", "GYROS", "HAIRY", "HANDY", "HAREM", "HAVEN", "HEFTY", "HELLO", "HIPPY", "HITCH", "HOARD", "HOIST", "HOUSE", "HOVER", "HUMID", "HYENA", "IDIOT", "IGLOO", "IMAGE", "INANE", "INNER", "IONIC", "ISLET", "JEANS", "JETTY", "JIFFY", "KABOB", "KARAT", "KAZOO", "KEBAB", "KHAKI", "KLUTZ", "KNEAD", "KNOCK", "KOOKY", "LAGER", "LANAI", "LASSO", "LATHE", "LEASE", "LEAVE", "LEGAL", "LEVER", "LIBRA", "LIMBO", "LINKS", "LIPID", "LITRE", "LODGE", "LOFTY", "LOOPY", "LOYAL", "LUMEN", "LUNAR", "LYMPH", "MAJOR", "MANIA", "MANOR", "MARCH", "MARRY", "MATTE", "MEDIC", "MERCY", "MERIT", "MERRY", "MISTY", "MOCHA", "MODEL", "MOMMY", "MOUSE", "MOVER", "MOWER", "NABOB", "NAPPY", "NERVY", "NIFTY", "NOBLE", "NOISY", "NOTCH", "NUDGE", "OCCUR", "ONION", "OPTIC", "OUNCE", "PALSY", "PANEL", "PANIC", "PARRY", "PEACH", "PEARL", "PEDAL", "PHONY", "PIANO", "PILOT", "PINTO", "PIVOT", "PLACE", "PLATE", "POINT", "POKER", "PORCH", "POUCH", "PRAWN", "PRIMP", "PRONG", "PROXY", "PUNCH", "PUTTY", "QUAFF", "QUARK", "QUELL", "QUEST", "QUIET", "QUIRK", "QUOTA", "RADIO", "RANCH", "RATIO", "RAZOR", "RELAY", "REPLY", "RETRY", "RHINO", "RIVET", "ROOST", "ROTOR", "ROYAL", "RUGBY", "RURAL", "SAGGY", "SALVO", "SATAN", "SCALD", "SCANT", "SCORR", "SCOOT", "SCRAM", "SCUBA", "SIEGE", "SEVEN", "SHAFT", "SHAPE", "SHARP", "SHEEP", "SIDLE", "SINUS", "SKATE", "SKIRT", "SLACK", "SLASH", "SLOOP", "SLOTH", "SLUSH", "SMELL", "SMOCK", "SNAKE", "SNIPE", "SOLVE", "SORRY", "SPARK", "SPOIL", "SPOUT", "SPRAY", "SPRIG", "SQUAB", "STAIR", "STATE", "STEAM", "STEEP", "STINK", "STOIC", "STOOL", "STORE", "STRAY", "STUCK", "STUNT", "SUEDE", "SUGAR", "SURLY", "SWATH", "SWEPT", "SWIPE", "SWORD", "TACIT", "TASTE", "TEENY", "THEFT", "THERE", "THUMB", "TINNY", "TONIC", "TOOTH", "TOPIC", "TOUCH", "TRAIN", "TREAT", "TRESS", "TROOP", "TROUT", "TRUNK", "TUBBY", "TWEED", "TWIST", "UDDER", "UNCUT", "URBAN", "USHER", "USURY", "VALOR", "VAULT", "VENUE", "VILLA", "VIRGE", "VISTA", "VOICE", "WACKY", "WALTZ", "WASTE", "WHITE", "WHOSE", "WIDOW", "WINCH", "WOMEN", "WORRY", "WREST", "YEARN", "YOUNG", "YUMMY", "ZILCH", "ALIBI", "ALIEN", "ALGAE", "ALLAY", "ALLOW", "ALTAR", "AMAZE", "AMISS", "ALLOY", "ALOFT", "ALONE", "ALTER", "AMASS", "AMBLE", "AMESS", "AMUSE", "ANGST", "ANJOU", "ANNEX", "ANNOY", "ANTIC", "AMONG", "ANGLE", "ANGUS", "ANISE", "ANNUL", "ANTSY", "APRON", "ARBOR", "ARDOR", "ARGUE", "AROMA", "ARISE", "ARRAY", "ASPEN", "ATLAS", "ATOLL", "ATTIC", "AURAL", "ASCOT", "ASIDE", "ASKEW", "ASSAY", "AUGER", "AXIOM", "AWARE", "AWFUL", "BAGEL", "BALMY", "BALSA", "BANJO", "BARGE", "BIGOT", "BIKER", "BINGE", "BITCH", "BLEAK", "BLEED", "BLIND", "BOGEY", "BLOKE", "BLOOP", "BLURT", "BOGUS", "BORAX", "BONNY", "BOSOM", "BONGO", "BOOST", "BOOZE", "BOSON", "BOUND", "BOYAR", "BRAZE", "BROIL", "BRACE", "BRAID", "BRAWN", "BRICK", "BRING", "BROAD", "BROKE", "BROOD", "BROTH", "BRUSH", "BUDGE", "BUGLE", "BUNCH", "BUNNY", "BURLY", "BURKA", "BUTCH", "BYLAW", "CABAL", "CACAO", "CADET", "CAJUN", "CALVE", "CANOE", "CABIN", "CACHE", "CADDY", "CADRE", "CAIRN", "CAKED", "CANON", "CAPON", "CAROL", "CAPER", "CARVE", "CAULK", "CEDAR", "CHAIN", "CHANT", "CHEEK", "CHAFE", "CHALK", "CHAOS", "CHARD", "CHASM", "CHEAP", "CHESS", "CHEWY", "CHOMP", "CHUNK", "CHEST", "CHIRP", "CHIVE", "CHORE", "CHUMP", "CLAIM", "CLERK", "CLOAK", "CLASH", "CLIFF", "CLOCK", "CLONE", "CLOSE", "CLOTH", "CLOVE", "CLUMP", "COACH", "COMIC", "CONDO", "CONIC", "COUPE", "COVET", "CRAFT", "CRANE", "CRESS", "COUGH", "COVEN", "COWER", "CRANK", "CRASS", "CRAWL", "CREED", "CREPE", "CREST", "CRIME", "CROON", "CUBIC", "CRIMP", "CROWN", "CURRY", "CURVY", "CYNIC", "CURIO", "CUSHY", "DACHA", "DAFFY", "DAILY", "DEIST", "DELAY", "DATUM", "DEBIT", "DECAY", "DECOR", "DEIFY", "DEITY", "DEMON", "DIDDY", "DIGIT", "DILLY", "DITTY", "DIZZY", "DINGO", "DIRTY", "DOGMA", "DONOR", "DOWRY", "DOUBT", "DRAFT", "DRAKE", "DRIFT", "DRAMA", "DRAWL", "DREAD", "DWARF", "DUNCE", "DWELL", "EAGLE", "EARLY", "EDICT", "ELOPE", "EDIFY", "ELATE", "ELECT", "ELITE", "ERECT", "ERROR", "EMORY", "ENACT", "ENEMY", "ENTER", "ENVOY", "EPOCH", "ERODE", "ERUPT", "ESSAY", "EXACT", "ETHIC", "EVOKE", "EXALT", "EXERT", "EVICT", "EXPEL", "FAINT", "FACET", "FARCE", "FEAST", "FANCY", "FAVOR", "FEIGN", "FAIRY", "FAKER", "FATWA", "FEINT", "FAITH", "FAULT", "FILET", "FELON", "FERAL", "FILLY", "FENCE", "FEVER", "FIELD", "FERRY", "FETAL", "FETID", "FEWER", "FIEND", "FIGHT", "FINCH", "FISHY", "FLAME", "FLECK", "FLOUR", "FJORD", "FLAIR", "FLANK", "FLASH", "FLESH", "FLOCK", "FLOUT", "FLACK", "FLASK", "FOGGY", "FLUFF", "FLUNG", "FLUTE", "FOCAL", "FORAY", "FORUM", "FLUID", "FLUNK", "FOCUS", "FOLIC", "FOYER", "FLUKE", "FOLLY", "FORCE", "FRAIL", "FRAME", "FREON", "FRIZZ", "FREAK", "FRIAR", "FROCK", "FRUMP", "FUDGE", "FUROR", "FRANK", "FRAUD", "FRIED", "FROZE", "FUGUE", "FUNKY", "FURRY", "FRISK", "FROND", "FROST", "FUNNY", "GABLE", "GAMUT", "GECKO", "GENRE", "GIANT", "GAUZE", "GENIE", "GHOST", "GAUNT", "GEESE", "GHOUL", "GIGUE", "GIDDY", "GLIDE", "GIZMO", "GLEAN", "GLOAT", "GLOOM", "GLYPH", "GIMPY", "GLAND", "GLINT", "GLOBE", "GNASH", "GIRTH", "GLADE", "GLAZE", "GLOSS", "GOURD", "GRAIN", "GRASP", "GONZO", "GOOSE", "GOUDA", "GRACE", "GRAND", "GRASS", "GRAVY", "GOLLY", "GOOFY", "GRAFT", "GRAPE", "GREED", "GREET", "GRIND", "GROIN", "GUARD", "GUMBO", "GROAN", "GROPE", "GROWN", "GUAVA", "GULCH", "GROAT", "GYPSY", "HABIT", "HADES", "HAIKU", "HALAL", "HALVE", "HAPPY", "HARDY", "HARMS", "HARRY", "HASTY", "HAZEL", "HEART", "HEAVY", "HEAVE", "HEDGE", "HARSH", "HATCH", "HAUTE", "HEATH", "HEIST", "HAUNT", "HAVOC", "HEARD", "HELIX", "HENNA", "HERTZ", "HENCE", "HERON", "HILLY", "HOBBY", "HIPPO", "HISSY", "HONEY", "HORNY", "HOWDY", "HOCUS", "HOODY", "HORRY", "HOUND", "HOVEL", "HOWEL", "HOLLY", "HONOR", "HORDE", "HUMOR", "HUNCH", "HUSKY", "HUSSY", "HYPER", "ICING", "IDIOM", "IDEAL", "ICONS", "IDYLL", "IMPLY", "INEPT", "INCUR", "INDEX", "INERT", "INLAY", "IMBED", "IMPEL", "INFER", "INGOT", "INPUT", "INSET", "ISLAM", "INURE", "IRONY", "ISSUE", "IVORY", "JAUNT", "JEWEL", "JANUS", "JELLO", "JERKY", "JINGO", "JOKER", "JAZZY", "JELLY", "JOINT", "JUICE", "JUICY", "JUDAS", "JUMBO", "JOLLY", "JOUST", "JUDGE", "JUROR", "KARMA", "KAYAK", "KAPUT", "KETCH", "KINKY", "KIOSK", "KITTY", "KNACK", "KNEED", "KNOLL", "KUDOS", "KNEEL", "KNIFE", "KNOWN", "LABEL", "LADEN", "LANKY", "LAPSE", "LABOR", "LAITY", "LANCE", "LAPIS", "LAUGH", "LEARN", "LEASH", "LEDGE", "LAYER", "LEAST", "LARGO", "LATCH", "LATEX", "LATIN", "LEARY", "LEFTY", "LEGIT", "LEMON", "LEVEL", "LIGHT", "LEMUR", "LIEGE", "LIKEN", "LINEN", "LIVID", "LIMIT", "LINER", "LITHE", "LOBBY", "LINGO", "LIVER", "LLAMA", "LOATH", "LOCUS", "LONER", "LOOSE", "LOSER", "LOUSY", "LOONY", "LOTTO", "LOWLY", "LUNGE", "LUSTY", "LOVER", "LUMPY", "LUNCH", "LOWER", "LUCID", "MACRO", "MAGMA", "MACHO", "MAIZE", "MAKER", "MANIC", "MANGO", "MANSE", "MAPLE", "MARSH", "MATCH", "MASON", "MAUVE", "MEANT", "MEDAL", "MELBA", "MAVEN", "MEATY", "MAYOR", "MEALY", "MELON", "MESSY", "MICRO", "MIGHT", "METAL", "METER", "MIDST", "MILKY", "METRO", "MIMIC", "MINUS", "MIRTH", "MODEM", "MOGUL", "MINER", "MITER", "MINTY", "MISER", "MODAL", "MOIST", "MOTET", "MOLAR", "MOODY", "MOOSE", "MOTEL", "MONEY", "MOOLA", "MORAL", "MOTIF", "MOTOR", "MOUND", "MUNCH", "MOULD", "MOVIE", "MOXIE", "MURAL", "MURKY", "MUSIC", "MOTTO", "MOURN", "MULCH", "MUTED", "MUSTY", "MYRRH", "NAIVE", "NANNY", "NACRE", "NASAL", "NADIR", "NATAL", "NIECE", "NAVAL", "NEEDY", "NICHE", "NIGHT", "NINJA", "NIPPY", "NOOSE", "NOVEL", "NOISE", "NURSE", "NUTTY", "NUTTY", "NYMPH"]
    },
    {
    cat: "6-Letter Words",
    sel: false,
    parent: "",
    numOfItems: 0,
    items: ["SEARCH", "SHOULD", "PLEASE", "REVIEW", "REPORT", "OFFICE", "STATES", "COUNTY", "DURING", "MOVIES", "COURSE", "SELECT", "REALLY", "FORUMS", "ISSUES", "MOBILE", "MEMORY", "SINGLE", "SELLER", "MAKING", "GARDEN", "NOTICE", "SAFETY", "CALLED", "REGION", "ONLINE", "SYSTEM", "RIGHTS", "UNITED", "MEMBER", "DESIGN", "FAMILY", "ACCESS", "RETURN", "SOURCE", "PHOTOS", "ACTION", "BETTER", "STREET", "OFFERS", "SOCIAL", "LATEST", "ALWAYS", "FUTURE", "LISTED", "OTHERS", "HAVING", "PERIOD", "ISLAND", "PEOPLE", "POLICY", "PUBLIC", "CENTER", "BEFORE", "POSTED", "PRICES", "CHANGE", "EVENTS", "AUTHOR", "CREDIT", "THREAD", "SERIES", "FRIEND", "THINGS", "RECENT", "STATUS", "RESULT", "ENERGY", "FORMAT", "COMMON", "WINDOW", "RECORD", "HEALTH", "NUMBER", "SCHOOL", "TRAVEL", "HOTELS", "WITHIN", "SPORTS", "RATING", "LITTLE", "AROUND", "ESTATE", "MARKER", "SECOND", "SERVER", "PERSON", "STORES", "CREATE", "BROWSE", "GROUPS", "BECOME", "IMAGES", "MONTHS", "LIVING", "DIRECT", "MADAME", "MAGNET", "MAINLY", "MADCAP", "MAKEUP", "MADDEN", "MAIDEN", "MAKING", "MALTED", "MACULA", "MAILED", "MALIGN", "MALLET", "MAMMAL", "MANAGE", "MANGER", "MANTLE", "MANUAL", "MARKET", "MAROON", "MARROW", "MASCOT", "MANGLE", "MARGIN", "MARINA", "MARLIN", "MARTYR", "MANGOS", "MANNER", "MANTRA", "MARINE", "MARVEL", "MANIAC", "MAPPED", "MARBLE", "MARMOT", "MASHED", "MASHER", "MASTER", "MATTED", "MATZAH", "MAYDAY", "MEAGER", "MEASLY", "MEDIAL", "MEDIUM", "MELODY", "MASSES", "MATTER", "MAXIMA", "MEDIAN", "MEDLEY", "MASKED", "MASSIF", "MATRIX", "MELLOW", "MELTED", "MATING", "MATRON", "MATURE", "MAULED", "MAYHEM", "MEADOW", "MEDDLE", "MEMORY", "MENSCH", "MERELY", "MICRON", "MIGHTY", "MENACE", "METHOD", "METRIC", "MIDDLE", "MILAGE", "MENAGE", "MENTAL", "MENTOR", "MERGED", "MIDWAY", "MILDER", "MENIAL", "MERGER", "MERITS", "METEOR", "MIASMA", "MIDDAY", "MIDGET", "MIFFED", "MILDEW", "MILDLY", "MINGLE", "MINUET", "MISHAP", "MIXING", "MODIFY", "MODULO", "MILIEU", "MILLER", "MIMICS", "MINUTE", "MISLED", "MOBBED", "MILDER", "MILKED", "MINING", "MISERY", "MOBILE", "MODELS", "MODEST", "MODULE", "MINCED", "MINION", "MINNOW", "MIRAGE", "MISFIT", "MISSED", "MISTER", "MISUSE", "MOANED", "MOCKED", "MOGULS", "MOLEST", "MOLTEN", "MONGER", "MORASS", "MORTAR", "MOSAIC", "MOSQUE", "MOMENT", "MORBID", "MOROSE", "MORROW", "MOHAWK", "MONKEY", "MONTHS", "MOOLAH", "MORALE", "MORSEL", "MORALS", "MOSTLY", "MOTTOS", "MOUNDS", "MOUTHS", "MOWING", "MUFFET", "MUSCLE", "MOTLEY", "MUDDLE", "MURMUR", "MUSEUM", "MOTION", "MOVING", "MUFFLE", "MURDER", "MUSKET", "MOTHER", "MOTIVE", "MOUSSE", "MUCOUS", "MUESLI", "MUMBLE", "MYTHIC", "MUTANT", "MUTINY", "MYRIAD", "MYSELF", "MYOPIA", "MUSSEL", "MYSTIC", "ABACUS", "ABLAZE", "ABRUPT", "ACCENT", "ACCRUE", "ACQUIT", "ACTION", "ACTUAL", "ADDICT", "AFFIRM", "AFLAME", "ALLEGE", "ALLIED", "ALMOND", "AMULET", "ANEMIC", "ANIMAL", "ANTHEM", "ANYONE", "ARCHER", "ARCTIC", "ARMORY", "ARRIVE", "ARTERY", "ASCENT", "ASLEEP", "ASSESS", "ASSIST", "ASSUME", "ASTHMA", "ASYLUM", "ATRIUM", "AUTHOR", "AVATAR", "AWHILE", "BACKUP", "BALLAD", "BANISH", "BARLEY", "BARREL", "BASKET", "BATTLE", "BEAGLE", "BEHEST", "BELIEF", "BERATE", "BEWARE", "BIASED", "BICKER", "BIGAMY", "BIKINI", "BILLOW", "BITMAP", "BLOUSE", "BOTANY", "BRANDY", "BRAZEN", "BREECH", "BROKEN", "BUFFET", "BUMPER", "BUNION", "BURGER", "BUSTLE", "BUTLER", "BUYOUT", "CADDIE", "CAJOLE", "CALMLY", "CAMERA", "CANDLE", "CANYON", "CARING", "CAUSAL", "CAVIAR", "CENSUS", "CEREAL", "CHANGE", "CHIPPY", "CHOOSE", "CHORAL", "CHORUS", "CHUBBY", "CHUNKY", "CIRRUS", "CLAMOR", "CLENCH", "CLEVER", "CLIMAX", "CLOTHE", "CLUMSY", "CODDLE", "CODIFY", "CONDOR", "CONVEX", "COOKED", "COOLER", "CORRAL", "COUNTY", "COUSIN", "COYOTE", "CRAVEN", "CRISES", "CROUCH", "CRUISE", "CUDDLY", "CUPOLA", "CYCLIC", "DABBLE", "DAGGER", "DAMSEL", "DANGLE", "DARING", "DEACON", "DEARTH", "DECADE", "DEDUCE", "DEFEND", "DEMAND", "DENIAL", "DENTAL", "DEPART", "DEPORT", "DERIVE", "DESIGN", "DETAIN", "DETEST", "DEVICE", "DEVOUR", "DIAPER", "DIFFER", "DIRECT", "DIVEST", "DOCTOR", "DONATE", "DOODLE", "DRAPES", "DRENCH", "DRIVEL", "EARTHY", "EFFECT", "EGOIST", "EMBARK", "EMBARK", "EMBRYO", "ENCORE", "ENDIVE", "ENGAGE", "ENGULF", "ENOUGH", "ENSIGN", "ENTAIL", "ENTIRE", "EQUATE", "EQUITY", "ERRAND", "ESCHEW", "EVINCE", "EXCEED", "EXCISE", "EXPECT", "EXPIRE", "EXTANT", "EYELID", "FACTOR", "FAMINE", "FARMER", "FECUND", "FENCER", "FERRET", "FETISH", "FIDDLE", "FLANGE", "FLESHY", "FLIGHT", "FLUFFY", "FOLLOW", "FORBID", "FOREST", "FOURTH", "FRIZZY", "FROTHY", "FUSION", "GAELIC", "GAGGLE", "GALLUP", "GARDEN", "GARLIC", "GAUCHE", "GAZEBO", "GENIUS", "GERUND", "GIBSON", "GIGGLE", "GIMLET", "GLANCE", "GLASSY", "GLITZY", "GLOSSY", "GOBLIN", "GOLFER", "GOPHER", "GOSPEL", "GRAVEL", "GRISLY", "GROUND", "GROVEL", "GUZZLE", "HALLOW", "HAMMER", "HANGAR", "HAPPEN", "HARBOR", "HASSLE", "HEALTH", "HEAVEN", "HECKLE", "HERBAL", "HEREBY", "HEYDAY", "HINDER", "HOBBLE", "HOMELY", "HORROR", "HUBRIS", "HYBRID", "IAMBIX", "ICEBOX", "IGNITE", "INPAIR", "IMPEDE", "IMPORT", "IMPUTE", "INCITE", "INDUCT", "INFORM", "INJURY", "INSECT", "INSIST", "INTEND", "INVENT", "INVOKE", "IODINE", "JACKAL", "JAGUAR", "JALOPY", "JARGON", "JAUNTY", "JIGGLE", "JITTER", "JOGGER", "JOYOUS", "JUNGLE", "KERNEL", "KIDNAP", "KIMONO", "KINDLE", "KITTEN", "LAUREL", "LAWYER", "LAYMAN", "LEAGUE", "LEGACY", "LEGEND", "LENGTH", "LETHAL", "LIMBER", "LINGER", "LITMUS", "LOATHE", "LOCKET", "LUXURY", "MADAME", "MADMAN", "MAGGOT", "MAGNET", "MAGPIE", "MANTLE", "MARKET", "MAROON", "MASCOT", "MASHER", "MASTER", "MEAGER", "MEASLY", "MEDIAL", "MELODY", "MEMORY", "MICRON", "MINUET", "MISHAP", "MODIFY", "MOHAIR", "MOLTEN", "MONGER", "MORASS", "MORTAR", "MOSAIC", "MOSQUE", "MUSCLE", "MUTTON", "MYTHIC", "CABANA", "CACHET", "CALIPH", "CAMPER", "CANARD", "CANCEL", "CABBIE", "CACKLE", "CANDOR", "CANNON", "CANOPY", "CARAFE", "CARESS", "CARNAL", "CANTON", "CAREEN", "CARTON", "CASHEW", "CASTLE", "CASUAL", "CATTLE", "CAVEAT", "CARTEL", "CATCHY", "CAUGHT", "CAVERN", "CELLAR", "CEMENT", "CHAISE", "CHASTE", "CENTER", "CHAPEL", "CHATTY", "CHEERY", "CHERRY", "CHISEL", "CHOICE", "CHOSEN", "CHEESE", "CHERUB", "CHIRON", "CHURCH", "CIRCUS", "CITRUS", "CLERGY", "CLIENT", "CHROME", "CINDER", "CIPHER", "CLERIC", "CLIQUE", "CLOVEN", "CLUTCH", "COERCE", "COGENT", "CLOVER", "COARSE", "COFFEE", "COLLAR", "COLLIE", "COLONY", "COLUMN", "COMITY", "COMMIT", "CONCUR", "COMBAT", "COMMON", "COMPLY", "CONGER", "CONVEY", "CORNER", "COSMIC", "COOKIE", "CORNEA", "COSMOS", "COUGAR", "COUPON", "CRAYON", "CREATE", "COURSE", "CRADLE", "CRAVAT", "CRISIS", "CUDGEL", "CRINGE", "CUBISM", "CUTLET", "CYPHER", "DAMAGE", "DANDER", "DAPPER", "DAHLIA", "DAMASK", "DAPPLE", "DECEIT", "DEDUCT", "DEEPEN", "DEFAME", "DEFUSE", "DECENT", "DEFEAT", "DEFIED", "DELUDE", "DEMOTE", "DEPEND", "DEPOSE", "DEPUTY", "DESIRE", "DETECT", "DEVOUT", "DEMURE", "DENOTE", "DEPICT", "DETACH", "DEVISE", "DEVOTE", "DIESEL", "DIMPLE", "DISCUS", "DISMAY", "DITHER", "DISPEL", "DIVIDE", "DIMWIT", "DIVINE", "DORMER", "DOUBLE", "DRAWER", "DOGLEG", "DOMAIN", "DONKEY", "DRAGON", "DREAMY", "DROWSY", "DREARY", "DUGOUT", "DUPLEX", "DURESS", "DURING", "DYNAMO", "EASILY", "EFFORT", "EGGNOG", "ECLAIR", "EDITOR", "EITHER", "EMBODY", "ENCASE", "ELAPSE", "EMERGE", "ENDURE", "ENIGMA", "ENTITY", "EQUINE", "ERRANT", "ESCORT", "ENJOIN", "ENTRAP", "ERASER", "ERRATA", "ESCROW", "ESTATE", "ETHICS", "EXCITE", "EXODUS", "ESTEEM", "EUREKA", "EXCEPT", "EXCUSE", "EXHALE", "EXOTIC", "EXPEND", "EXTEND", "EXTORT", "EXPORT", "EXTENT", "FACADE", "FALLOW", "FAMOUS", "FASCIA", "FACILE", "FALCON", "FATHER", "FAULTY", "FABRIC", "FACIAL", "FALLEN", "FASTEN", "FATHOM", "FAUCET", "FEDORA", "FELONY", "FEMALE", "FERVOR", "FIAMCE", "FIERCE", "FILLET", "FEEBLE", "FEISTY", "FESCUE", "FEUDAL", "FIDGET", "FIESTA", "FELINE", "FELLOW", "FENDER", "FIASCO", "FIGURE", "FILIAL", "FINALE", "FINISH", "FLABBY", "FLEECE", "FINGER", "FIXATE", "FLAVOR", "FILTHY", "FINERY", "FISCAL", "FIZZLE", "FLAUNT", "FLIMSY", "FLORAL", "FLURRY", "FOLDER", "FOLKSY", "FOLSOM", "FORAGE", "FLINCH", "FLOWER", "FLUTED", "FOMENT", "FLUENT", "FOOTER", "FOREGO", "FORGET", "FORMAL", "FOUGHT", "FOWLER", "FRENZY", "FRIDGE", "FRIEZE", "FRILLY", "FRISKY", "FORGOT", "FORMAT", "FRIGHT", "FORGER", "FOSSIL", "FREEZE", "FRESCO", "FRIGID", "FRUITY", "FRYPAN", "FUMBLE", "FROZEN", "FUNNEL", "FURROW", "FROLIC", "FROSTY", "FRUGAL", "FUDGED", "FUNGUS", "FUTILE", "GAFFER", "GAMBIT", "GANTRY", "GARAGE", "GADFLY", "GAIETY", "GALAXY", "GALLON", "GALORE", "GAMBLE", "GANDER", "GARNET", "GARTER", "GADGET", "GALLOP", "GARISH", "GARCON", "GASKET", "GATHER", "GAUCHO", "GENOME", "GENTLE", "GERBIL", "GEYSER", "GEISHA", "GEMINI", "GENIAL", "GENTLY", "GIBBON", "GENDER", "GHETTO", "GIBLET", "GIGOLO", "GINGER", "GLADLY", "GLAZED", "GLOBAL", "GOBBLE", "GLAZER", "GLOOMY", "GLUTEN", "GIRDLE", "GLIDER", "GLITCH", "GNARLY", "GOBLET", "GODSON", "GOSSIP", "GRANNY", "GRASSY", "GRAVEN", "GOOGOL", "GOTHAM", "GOVERN", "GOLDEN", "GOOBER", "GOTHIC", "GOURDE", "GRAINY", "GRANGE", "GRATIS", "GREENS", "GRITTY", "GROGGY", "GROWTH", "GREASE", "GRUBBY", "GUFFAW", "GREASY", "GREEDY", "GRINCH", "GROUCH", "GRUDGE", "GUITAR", "GURGLE", "GUSHER", "GULLET", "GUTTER", "GYPSUM", "GULLEY", "GURNEY", "HAGGIS", "HALTER", "HAMPER", "HAGGLE", "HACKER", "HAIRDO", "HANDLE", "HARDEN", "HARLOT", "HASTEN", "HEADER", "HEARTH", "HEATER", "HANGER", "HARDER", "HANSOM", "HARASS", "HASSEL", "HAWKER", "HAZING", "HEARTY", "HEIGHT", "HELIUM", "HERESY", "HEROIC", "HIDDEN", "HECTOR", "HELMET", "HERETO", "HERMIT", "HIATUS", "HIJACK", "HERNIA", "HICCUP", "HIPPIE", "HOARSE", "HOOPLA", "HOORAY", "HITTER", "HOCKEY", "HOLDUP", "HOMAGE", "HOMILY", "HOOFER", "HOAGIE", "HOBBIT", "HOMBRE", "HONEST", "HOODIE", "HUBBUB", "HUDDLE", "HUMANE", "HUMBUG", "HURTLE", "HUSTLE", "HORNET", "HOSTEL", "HOTDOG", "HOTROD", "HOWLER", "HUBCAP", "HUNGER", "HUNTER", "HORRID", "HOVERS", "HUMBLE", "HUNGRY", "HURDLE", "HYPHEN", "ICECAP", "ICONIC", "IGNORE", "IMMUNE", "IMPALA", "IGUANA", "IMBIBE", "IMPALE", "IMPUGN", "ICICLE", "IMPACT", "IMPART", "IMPISH", "INCOME", "INDEED", "INDICT", "INFAMY", "INFIRM", "INFUSE", "INNATE", "INSERT", "INSTEP", "INSURE", "INTENT", "INDENT", "INDOOR", "INFANT", "INFEXT", "INGEST", "INNING", "INSANE", "INSOLE", "INTACT", "INTERN", "INDIGO", "INDUCE", "INFECT", "INFLUX", "INHALE", "INJURE", "INLAND", "INMATE", "INSIDE", "INVERT", "IRONIC", "ITSELF", "INVEST", "IONIAN", "ISOBAR", "ITALIC", "INVADE", "INVITE", "ISLAND"]
    },
    {   
      cat: "7-Letter Words",
      sel: false,
      parent: "",
      numOfItems: 0,
      items: ["CONTACT", "MESSAGE", "GENERAL", "DETAILS", "SUBJECT", "VERSION", "NETWORK", "CONTROL", "PROFILE", "CONTENT", "INCLUDE", "PROCESS", "GALLERY", "MEDICAL", "AGAINST", "OPTIONS", "RELEASE", "SIMILAR", "STORIES", "COUNCIL", "EDITION", "STUDIES", "POWERED", "RECORDS", "HOSTING", "ANOTHER", "COUNTRY", "COLLEGE", "SCIENCE", "HOWEVER", "LOOKING", "PAYMENT", "REQUEST", "SCHOOLS", "JOURNAL", "ARCHIVE", "FURTHER", "SEVERAL", "NATURAL", "PRESENT", "TICKETS", "PRODUCT", "PRIVACY", "REVIEWS", "RESULTS", "SPECIAL", "RELATED", "WITHOUT", "ACCOUNT", "QUALITY", "PRIVATE", "ARTICLE", "COMMENT", "STUDENT", "EXAMPLE", "PICTURE", "MILLION", "REPORTS", "SOCIETY", "UPDATED", "DISPLAY", "WHETHER", "WRITTEN", "FINANCE", "COMPARE", "PROVIDE", "WINDOWS", "LIBRARY", "WORKING", "PROBLEM", "CHANGES", "MEETING", "POPULAR", "CENTRAL", "FRIENDS", "ALREADY", "LIMITED", "AVERAGE", "FEDERAL", "MINUTES", "ABDOMEN", "ABSORBS", "ABUSIVE", "ACCORDS", "ACCRUES", "ACCUSES", "ACOLYTE", "ACROBAT", "ACTIONS", "ACUTELY", "ADAPTER", "ADHERED", "ADMIRAL", "ADOPTED", "ADVANCE", "ADVISOR", "AFFABLE", "AGILITY", "AILERON", "AIRFARE", "AIRPORT", "ALARMED", "ALGEBRA", "ALIMONY", "ALLERGY", "ALLUDES", "ALTERED", "AMBIENT", "AMENITY", "AMONGST", "ANALYZE", "ANGERED", "ANGULAR", "ANIMISM", "ANNUITY", "ANTHRAX", "ANTONYM", "ANYBODY", "APOSTLE", "APPEASE", "APPRISE", "ARCHIVE", "AROUSAL", "ARRIVAL", "ARSENAL", "ASPIRES", "ASSUAGE", "ASTOUND", "ATHLETE", "ATTACHE", "AUDIBLY", "AUGMENT", "AUTOPSY", "AVERAGE", "AWESOME", "BACKING", "BACKOUT", "BAFFLED", "BAKLAVA", "BANDAGE", "BANKING", "BARMAID", "BARRAGE", "BATHING", "BEASTLY", "BEATNIK", "BEDDING", "BEDROOM", "BEFALLS", "BELONGS", "BELTWAY", "BERATED", "BESPOKE", "BESTING", "BETWEEN", "BIGOTED", "BINDING", "BIVOUAC", "BLACKEN", "BLATHER", "BLESSED", "BLINDER", "BLISTER", "BOARDED", "BOLOGNA", "BOMBAST", "BONANZA", "BOOMING", "BOREDOM", "BOUDOIR", "BOUNCER", "BOUQUET", "BOWLING", "BOYHOOD", "BRAVADO", "BREAKUP", "BRIGADE", "BRISKET", "BROADEN", "BROILED", "BROMIDE", "BROTHER", "BUCOLIC", "BUILDUP", "BURNOUT", "BUTTERY", "BYGONES", "CACHING", "CADENCE", "CAISSON", "CALIPER", "CALMING", "CALUMNY", "CALZONE", "CANNOLI", "CANTATA", "CAPABLE", "CAPITAN", "CAPSULE", "CARCASS", "CARIBOU", "CASTING", "CATFISH", "CATTAIL", "CAYENNE", "CELESTE", "CENTAUR", "CENTURY", "CHALICE", "CHAMOIS", "CHANSON", "CHAOTIC", "CHAPLIN", "CHARADE", "CHARMER", "CHECKER", "CHERISH", "CHIEFLY", "CHIMERA", "CHOPPER", "CHRONIC", "CHUCKLE", "CHURNED", "CISTERN", "CITIZEN", "CLEANSE", "CLEARLY", "CLOSTER", "CLOYING", "COAXIAL", "CODFISH", "COGNATE", "COLLATE", "COMMUNE", "COMPETE", "COMPORT", "CONCEAL", "CONCERN", "CONDONE", "CONFINE", "CONFUSE", "CONJURE", "CONNOTE", "CONTACT", "CONTENT", "CONTOUR", "COOKING", "CORNICE", "CORONET", "CORRECT", "CORRUPT", "CORTINA", "COURAGE", "COVERUP", "CRANIAL", "CREASED", "CREATOR", "CREMONA", "CRICKET", "CRIMSON", "CRISPER", "CRITTER", "CRUELLY", "CRYPTIC", "CUBICLE", "CULVERT", "CUNNING", "CURABLE", "CURVING", "CUSTARD", "CYCLONE", "DABBLED", "DANCING", "DATASET", "DAYLONG", "DAZZLED", "DEBASED", "DECENCY", "DECRYPT", "DEFIANT", "DEFRAUD", "DELIVER", "DEMONIC", "DENIZEN", "DENOTES", "DEPENDS", "DESCEND", "DESERVE", "DESKTOP", "DESTROY", "DETENTE", "DEVALUE", "DIAGRAM", "DIGNITY", "DINETTE", "DIORAMA", "DIPLOMA", "DISCARD", "DISDAIN", "DISLIKE", "DISSECT", "DISTILL", "DIVERGE", "DIVIDER", "DIVISOR", "DOGGONE", "DONATED", "DOORMAT", "DORMANT", "DOSSIER", "DOUGHTY", "DRAGOON", "DREIDEL", "DROPPED", "DRYWALL", "DUBIOUS", "DUCTILE", "DUOPOLY", "DUSTBIN", "DUTIFUL", "DWELLER", "EAGERLY", "EARLIER", "EARNEST", "EASTERN", "ECLIPSE", "EDUCATE", "ELECTED", "ELITISM", "ELUSIVE", "ELYSIUM", "EMBRACE", "EMPATHY", "ENABLER", "ENCASED", "ENCRYPT", "ENDLESS", "ENDURED", "ENGLISH", "ENLIVEN", "ENTICED", "ENVIOUS", "EPISODE", "EPITHET", "EPSILON", "EROTICA", "ESSENCE", "ETHANOL", "EVASIVE", "EVIDENT", "EXALTED", "EXCEEDS", "EXCITED", "EXCLAIM", "EXHIBIT", "EXCUSED", "EXPANDS", "EXPENSE", "EXPLAIN", "EXPERSS", "EXTRACT", "EXTRUDE", "FACTORY", "FAILURE", "FAIREST", "FALAFEL", "FALLING", "FALSIFY", "FARMING", "FARTHER", "FASHION", "FATALLY", "FAVORED", "FEARING", "FEBRILE", "FEMORAL", "FERROUS", "FERVOUR", "FEUDING", "FIFTEEN", "FINANCE", "FINESSE", "FIREARM", "FIREMEN", "FISSURE", "FLACCID", "FLATBED", "FLOWING", "FLUTIST", "FLYOVER", "FOLDOUT", "FOOTING", "FORBIDS", "FORFEIT", "FORSOOK", "FOUNDRY", "FRANTIC", "FRAYING", "FRITTER", "FUCHSIA", "FUNERAL", "FURNACE", "FURTIVE", "GASTRIC", "GEARBOX", "GALLANT", "GALLOWS", "GANGWAY", "GARBAGE", "GARNETT", "GATEWAY", "GAZELLE", "GELATIN", "GESTURE", "GIRAFFE", "GELDING", "GENESIS", "GENUINE", "GETAWAY", "GHOSTLY", "GENERIC", "GENETIC", "GENTILE", "GERMANE", "GHASTLY", "GIMMICK", "GIZZARD", "GLACIER", "GLAMOUR", "GLISTEN", "GNOSTIC", "GODDESS", "GORILLA", "GLAZIER", "GLIMMER", "GLITTER", "GLUCOSE", "GNARLED", "GONDOLA", "GLIMPSE", "GLUTTON", "GRATIFY", "GRAVITY", "GRIDDLE", "GRANITE", "GRAPHIC", "GRENADE", "GOURMET", "GRANARY", "GRANDMA", "GRIMACE", "GRISTLE", "GUNFIRE", "GUTLESS", "GROUCHY", "GRUMBLE", "GUMSHOE", "GROCERY", "HABITAT", "HADDOCK", "HALCYON", "HAMMOCK", "HANDBAG", "HAPLESS", "HAPPILY", "GYMNAST", "HAGGARD", "HANDFUL", "HACKNEY", "HALIBUT", "HAMSTER", "HANGMAN", "HARNESS", "HARPOON", "HARVEST", "HATCHET", "HAUGHTY", "HEAVILY", "HARMFUL", "HARRIED", "HAYSEED", "HEADWAY", "HEARSAY", "HEATHEN", "HEGEMON", "HELLISH", "HEMLINE", "HERRING", "HEXAGON", "HIMSELF", "HEIRESS", "HEMLOCK", "HERSELF", "HIBACHI", "HELPFUL", "HEROINE", "HICCUPS", "HIDEOUT", "HIRSUTE", "HOLDOUT", "HOLSTER", "HORMONE", "HOSIERY", "HOSTESS", "HOTLINE", "HOLIDAY", "HONESTY", "HOPEFUL", "HOSTILE", "HUMIDOR", "HUSBAND", "HUMDRUM", "HUSTLER", "IDYLLIC", "ILLEGAL", "IMPASSE", "IMPROVE", "IDEALLY", "IMMORAL", "IMPEACH", "IMPLODE", "IMPRESS", "IMPULSE", "ICEBERG", "IDIOTIC", "ILLNESS", "IMITATE", "IMPETUS", "IMPLANT", "INCENSE", "INERTIA", "INFLATE", "INHALER", "INITIAL", "INSIPID", "INEXACT", "INFIDEL", "INHERIT", "INKBLOT", "INSIDER", "INFANCY", "INHABIT", "INHIBIT", "INQUIRE", "INSOFAR", "INSPECT", "INTEGER", "INTERIM", "INVOICE", "INVOLVE", "ISOLATE", "INSPIRE", "INSULAR", "INVERSE", "ISTHMUS", "ITEMIZE", "INSTALL", "INSULIN", "INTENSE", "INTRUDE", "ITERATE", "JANITOR", "JEZEBEL", "JACKPOT", "JAVELIN", "JITTERY", "JOBLESS", "JUBILEE", "JUSTIFY", "JOURNAL", "JUGGLER", "JOURNEY", "KASHMIR", "KEYWORD", "KINGPIN", "KARAOKE", "KICKOFF", "KETCHUP", "KINGDOM", "LACONIC", "LADYBUG", "KUMQUAT", "KITCHEN", "KNUCKLE", "LAMPOON", "LASAGNA", "LATERAL", "LAYOVER", "LANGUID", "LANTERN", "LANOLIN", "LECTURE", "LENGTHY", "LEGWORK", "LEISURE", "LENIENT", "LETTUCE", "LITERAL", "LOCALLY", "LOGICAL", "LIMITED", "LIQUEUR", "LITURGY", "LINKAGE", "LONGBOW", "LOYALTY", "LUGGAGE", "LYRICAL", "LUCKILY", "LUSTFUL", "LOOKOUT", "LOWLIFE", "MAGENTA", "MAHJONG", "MALLARD", "MANDATE", "MACABRE", "MACHINE", "MADNESS", "MAILBOX", "MAILMAN", "MAMMOTH", "MANATEE", "MANDREL", "MACRAME", "MAESTRO", "MALAISE", "MANHOLE", "MARIMBA", "MANHOOD", "MANILLA", "MARTIAL", "MANHUNT", "MANSION", "MARINER", "MARSHAL", "MASSEUR", "MAXIMUM", "MEDULLA", "MASONRY", "MEANDER", "MEASURE", "MEDIATE", "MELANIN", "MASSIVE", "MATINEE", "MAZURKA", "MEDICAL", "MEMENTO", "MENTHOL", "MERCURY", "MERMAID", "MILITIA", "MIMICRY", "MENTION", "METHANE", "MICROBE", "MIDWEEK", "MIGRANT", "MILEAGE", "MENORAH", "MERRILY", "MESSIAH", "MIDWEST", "MIGRATE", "MINERAL", "MISLEAD", "MISSING", "MISTAKE", "MINIMUM", "MISSION", "MOBSTER", "MODESTY", "MOISTEN", "MINDFUL", "MIRACLE", "MISERLY", "MIXTURE", "MODICUM", "MONIKER", "MORONIC", "MONARCH", "MONITOR", "MONSOON", "MONTHLY", "MOTTLED", "MOLLUSK", "MONSTER", "MUFFLER", "MUSICAL", "MUTABLE", "MYSTERY", "MUSTANG", "MYSTIFY", "NAIVETY", "NARWHAL", "NECKTIE", "NEGLECT", "NERVOUS", "NARRATE", "NASCENT", "NATURAL", "NEMESIS", "NETWORK", "NEITHER", "NIRVANA", "NOSTRUM", "NEWBORN", "NEUTRAL", "NOMADIC", "NOTEPAD", "NOURISH", "NOVELTY", "NURSERY", "NUMERIC", "NUNNERY", "NURTURE", "OBSCURE", "OBVIATE", "OBELISK", "OBLIQUE", "OBVIOUS", "OBESITY", "OBSCENE", "OCTOPUS", "ONEROUS", "OPERATE", "OPTIMAL", "ODDBALL", "OMNIBUS", "ONESELF", "OPOSSUM", "OPPRESS", "OPTIMUM", "ODYSSEY", "OFFBEAT", "ONETIME", "OPACITY", "OPTICAL", "ORCHARD", "OSTRICH", "OTTOMAN", "OUTCROP", "OUTGROW", "OUTPOST", "ORATORY", "ORDERLY", "OUTBACK", "OUTSIDE", "ORBITAL", "OURSELF", "OUTCAST", "OUTLOOK", "OUTRAGE", "OVERALL", "OUTWARD", "OVERRUN", "OVATION", "OVERUSE", "OXIDANT", "OYSTERS", "PACKAGE", "PADLOCK", "PAJAMAS", "PAINTER", "PALETTE", "PANACEA", "PANICKY", "PAIRING", "PANACHE", "PARASOL", "PARQUET", "PARSLEY", "PARTAKE", "PANTHER", "PAPYRUS", "PARADOX", "PARFAIT", "PARSNIP", "PARTIAL", "PASSAGE", "PASSION", "PAPOOSE", "PARABLE", "PARAGON", "PASSIVE", "PASTURE", "PATELLA", "PATIENT", "PATTERN", "PAUCITY", "PAYLOAD", "PEEVISH", "PELICAN", "PENALTY", "PENSION", "PERFIDY", "PATRIOT", "PAYMENT", "PEASANT", "PENANCE", "PENDING", "PENSIVE", "PERFORM", "PAYABLE", "PEDDLER", "PEERAGE", "PERFUME", "PETUNIA", "PHANTOM", "PHONEME", "PERHAPS", "PERJURY", "PERVADE", "PHALANX", "PHAROAH", "PICCOLO", "PERPLEX", "PERSIST", "PERTURB", "PERVERT", "PIANIST", "PICKAXE", "PICKLED", "PILSNER", "PIQUANT", "PLACARD", "PIGMENT", "PILLORY", "PITFALL", "PIVOTAL", "PLACATE", "PLAINLY", "PILGRIM", "PIMENTO", "PIONEER", "PITCHER", "PLACEBO", "PLASTER", "PLATTER", "PLYWOOD", "POLEMIC", "PLASTIC", "PLATOON", "PLAYBOY", "PLIABLE", "PLUNGER", "POLENTA", "PLANTER", "PLAYOFF", "POINTED", "POLYGON", "PONTOON", "POTABLE", "POTTERY", "POLYMER", "PORTICO", "POSTBOX", "POULTRY", "POVERTY", "POLLUTE", "POMPOUS", "PORCINE", "PORTEND", "PORTRAY", "POSTURE", "POTHOLE", "PRAIRIE", "PRALINE", "PRECEPT", "PRELATE", "PREMIER", "PREQUEL", "PRETZEL", "PRECISE", "PERMISE", "PREPARE", "PREVAIL", "PRICKLY", "PREDATE", "PREFACE", "PRELUDE", "PREMIUM", "PRESENT", "PRINTER", "PROGENY", "PROPHET", "PROTECT", "PROWESS", "PROBATE", "PROCEED", "PROGRAM", "PROLONG", "PROPOSE", "PROTEGE", "PROVERB", "PROVISO", "PRUDENT", "PROFANE", "PROJECT", "PROMISE", "PROPANE", "PROSAIC", "PROTEIN", "PROVOKE", "PSYCHIC", "PUBERTY", "PUERILE", "PURPOSE", "PURVIEW", "PUDDING", "PURITAN", "PYRAMID", "PUMPKIN"]
      },
      {   
        cat: "8-Letter Words",
        sel: false,
        parent: "",
        numOfItems: 0,
        items: ["BUSINESS", "RESEARCH", "SHIPPING", "LOCATION", "COMPUTER", "PREVIOUS", "TRAINING", "REQUIRED", "STANDARD", "QUESTION", "POSSIBLE", "DELIVERY", "PROVIDES", "DATABASE", "RESOURCE", "FUNCTION", "RECEIVED", "POSITION", "RESPONSE", "DISCOUNT", "ACTIVITY", "SUPPLIES", "ANYTHING", "CLOTHING", "SERVICES", "COMMENTS", "RESERVED", "DOWNLOAD", "CHILDRED", "PROPERTY", "ADVANCED", "FEATURES", "ARTICLES", "PROGRAMS", "BUILDING", "PROBLEMS", "ORIGINAL", "SPECIFIC", "OFFICIAL", "DOCUMENT", "ECONOMIC", "ARCHIVES", "LISTINGS", "PRACTICE", "REMEMBER", "ALTHOUGH", "EXCHANGE", "MORTGAGE", "MILITARY", "PRODUCTS", "MATIONAL", "SECURITY", "PICTURES", "STUDENTS", "CUSTOMER", "CATEGORY", "INDUSTRY", "FEEDBACK", "LANGUAGE", "INTEREST", "INCLUDES", "DIRECTOR", "DISTRICT", "MATERIAL", "PROJECTS", "MAGAZINE", "WIRELESS", "HARDWARE", "INCREASE", "CONTENTS", "CONTINUE", "SOLUTION", "DECISION", "SOFTWARE", "INTERNET", "PERSONAL", "SHOPPING", "REGISTER", "PROVIDED", "COMPLETE", "PASSWORD", "ANALYSIS", "LEARNING", "MESSAGES", "PLANNING", "CALENDAR", "TOGETHER", "INCLUDED", "POLICIES", "PURCHASE", "DESIGNED", "REGIONAL", "BENEFITS", "ADDITION", "DIVISION", "AARDVARK", "ABDUCTED", "ABETTING", "ABRASION", "ABRUPTLY", "ABSENTIA", "ABSTRUSE", "ABUTMENT", "ACCREDIT", "ACCURACY", "ACHIEVER", "ACOUSTIC", "ACTIONAL", "ACTIVIST", "ACTUATOR", "ADAPTIVE", "ADDITION", "ADEQUACY", "ADHESION", "ADOPTION", "ADVISORY", "AFFINITY", "AFFLUENT", "AIRCRAFT", "ALARMIST", "ALFRESCO", "ALTITUDE", "AMBIENCE", "AMICABLY", "AMNESIAC", "AMPERAGE", "ANALYSTS", "ANCHORED", "ANNOUNCE", "ANTERIOR", "ANYPLACE", "APHORISM", "APOSTATE", "APPARENT", "APPETITE", "APPLYING", "APPRISED", "AQUEDUCT", "ARBOREAL", "ARCHIVAL", "AROMATIC", "ARROGANT", "ARTIFACT", "ARTISTIC", "ASCRIBED", "ASSENTOR", "ASSURANT", "ASTEROID", "ATTACHED", "ATTAINED", "ATTENDER", "AUGMENTS", "AVIONICS", "BABBLING", "BACKACHE", "BACKFLOW", "BACKSIDE", "BACKTALK", "BACTERIA", "BAGPIPES", "BALLGAME", "BANALITY", "BANDANNA", "BANKRUPT", "BAPTIZED", "BARBECUE", "BAREFOOT", "BARRACKS", "BASSINET", "BATHROBE", "BEARINGS", "BEETROOT", "BEGINNER", "BEHEMOTH", "BELIEVER", "BEMOANED", "BETRAYAL", "BIANNUAL", "BIFOCALS", "BIRDBATH", "BIRTHDAY", "BLACKOUT", "BLEACHED", "BLOCKADE", "BLOWHARD", "BLUEBIRD", "BLUSHING", "BOATYARD", "BODYSUIT", "BOOKABLE", "BOOKWORM", "BOTANIST", "BOUILLON", "BRACKISH", "BREAKAGE", "BREATHES", "BRETHREN", "BRIGHTEN", "BROACHED", "BROADWAY", "BUCKSKIN", "BULKHEAD", "BULLETIN", "BULLWHIP", "BURGUNDY", "BUSINESS", "BUTTRESS", "CACKLING", "CALENDAR", "CAMELLIA", "CAMPAIGN", "CAMPFIRE", "CAMSHAFT", "CANISTER", "CARDIGAN", "CAREFREE", "CAROUSEL", "CARRAWAY", "CASANOVA", "CASUALTY", "CATHETER", "CAUSEWAY", "CELLULAR", "CENTERED", "CEREBRUM", "CHANCERY", "CHASTITY", "CHESTNUT", "CHILDREN", "CHUTZPAH", "CINNAMON", "CIVILITY", "CLAMBAKE", "CLARINET", "CLEMENCY", "CLINCHER", "COERCION", "COLESLAW", "COLONIST", "COLORIZE", "COMMENCE", "COMPLAIN", "CONCLUDE", "CONGRESS", "CONQUEST", "CONSPIRE", "CONTRAST", "CONVINCE", "COOKWARE", "CORDUROY", "CORNICHE", "CORONARY", "COVENANT", "CRAWFISH", "CREATION", "CREDENCE", "CRITICAL", "CROUPIER", "CUFFLINK", "CURATIVE", "CYCLICAL", "CYLINDER", "DAYLIGHT", "DECADENT", "DECISION", "DECREPIT", "DEFIANCE", "DELEGATE", "DELICATE", "DELUSION", "DEMEANOR", "DERELICT", "DESTINED", "DEVOTION", "DIALOGUE", "DIATONIC", "DIGITIZE", "DILUTION", "DINOSAUR", "DIPSTICK", "DISBURSE", "DISCLOSE", "DISCREET", "DISPENSE", "DISPROVE", "DISSOLVE", "DISTRACT", "DIVIDEND", "DOCTORAL", "DOGMATIC", "DOMESTIC", "DOORKNOB", "DOVETAIL", "DOWNHILL", "DOWNLOAD", "DOWNSIDE", "DOWNTURN", "DRAINAGE", "DREAMILY", "DRUMBEAT", "DULCIMER", "DUMPLING", "EASTWARD", "ECLIPTIC", "EDUCATOR", "EFFICACY", "EFFUSIVE", "ELEPHANT", "ELEVENTH", "EMERGING", "EMPHASIS", "ENAMORED", "ENCUMBER", "ENFORCER", "ENGINEER", "ENORMOUS", "ENSEMBLE", "ENTWINED", "ENVIABLE", "EPIPHANY", "EQUALITY", "EQUATION", "ESCARGOT", "ETCETERA", "ETHERNET", "EUPHORIC", "EVERMORE", "EVOLVING", "EXIGENCY", "EXPEDITE", "EXTERIOR", "EYEGLASS", "FACELESS", "FACILITY", "FAIRNESS", "FARMLAND", "FAVORING", "FEARSOME", "FAMISHED", "FANCIFUL", "FASTBALL", "FAVORITE", "FEASIBLE", "FABULOUS", "FAITHFUL", "FARCICAL", "FIGURINE", "FINALIZE", "FINISHED", "FEEDBACK", "FEMININE", "FILIGREE", "FESTIVAL", "FIDELITY", "FIENDISH", "FINALIST", "FIRESIDE", "FIREWOOD", "FIXATION", "FLAWLESS", "FLIPPANT", "FLAGPOLE", "FIREBALL", "FIREWALL", "FISHBOWL", "FLAGRANT", "FLAMENCO", "FLATTERY", "FLOUNDER", "FOLKSONG", "FOOTNOTE", "FORCEFUL", "FORECAST", "FOREHEAD", "FLOURISH", "FOOTHILL", "FOOTWORK", "FOOTHOLD", "FOOTREST", "FORENSIC", "FORSAKEN", "FRACTURE", "FREEHAND", "FOREWARD", "FORGIVEN", "FORMERLY", "FORESTRY", "FOUNTAIN", "FRAGMENT", "FREQUENT", "FRENETIC", "FRICTION", "FRONTIER", "FRUITION", "FRESHMAN", "FRIGHTEN", "FURTHEST", "FUTILITY", "FRESHMEN", "FREUDIAN", "FROSTING", "FRUITFUL", "GADGETRY", "GALLERIA", "GARRISON", "GAUNTLET", "GENERATE", "GEMOLOGY", "GENOCIDE", "GERANIUM", "GLOSSARY", "GIGABYTE", "GLOBALLY", "GEOMETRY", "GIMMICKY", "GLOBULAR", "GORGEOUS", "GRACIOUS", "GRAFFITI", "GRATEFUL", "GREENERY", "GOODWILL", "GRADIENT", "GOLDFISH", "GRACEFUL", "GRIDIRON", "GRIZZLED", "GUIDANCE", "GREETING", "GRUESOME", "GULLIBLE", "HAIRLINE", "HALFLIFE", "HALFTONE", "HANDICAP", "HANDMADE", "HARDBALL", "HALLMARK", "HANDMAID", "HANDYMAN", "HABITUAL", "HALLOWED", "HANDBOOK", "HANDSOME", "HARDSHIP", "HEADACHE", "HEADWEAR", "HARMLESS", "HAYSTACK", "HEADWIND", "HEIRLOOM", "HARDWARE", "HEDONISM", "HELLENIC", "HENHOUSE", "HIBISCUS", "HIGHBALL", "HILLSIDE", "HELPLESS", "HESITANT", "HITHERTO", "HENCHMAN", "HERALDRY", "HESITATE", "HOLISTIC", "HOMESICK", "HONEYBEE", "HOLDOVER", "HOLOGRAM", "HOMEMADE", "HONEYDEW", "HOMELAND", "HOPELESS", "HUMANITY", "HYPNOSIS", "HUMANIZE", "HUMOROUS", "HYACINTH", "HYPNOTIC", "HUMANOID", "HYSTERIA", "IDEATION", "IDEOLOGY", "IDEALISM", "IGNOMINY", "IMBECILE", "IMITATOR", "IMMERSED", "IMPLICIT", "IMPOSTER", "INCLINED", "IGNORANT", "ILLUSION", "IMMANENT", "IMMORTAL", "IMPRISON", "INACTIVE", "INCISIVE", "ILLUSIVE", "IMMUNITY", "IMPORTER", "IMPROPER", "IMPUDENT", "INCHOATE", "INDIGENT", "INFERIOR", "INFORMER", "INFUSION", "INDIRECT", "INFANTRY", "INFERNAL", "INFRARED", "INNOCENT", "INCREASE", "INDECENT", "INDICATE", "INFINITY", "INFRINGE", "INHUMANE", "INNOVATE", "INSANITY", "INSTANCE", "INSTINCT", "INTERCOM", "INTREPID", "INSCRIBE", "INSOLENT", "INTEREST", "INVASION", "INVESTOR", "INSECURE", "INSTRUCT", "INTERIOR", "INTIMATE", "INVASIVE", "IRRIGATE", "ITEMIZED", "IRRITANT", "JEALOUSY", "JEOPARDY", "JUNCTION", "JUVENILE", "JETTISON", "JUDGMENT", "JUNCTURE", "JOYSTICK", "JULIENNE", "KAMIKAZE", "KEYBOARD", "KANGAROO", "KERCHIEF", "KEYSTONE", "KIELBASA", "KNAPSACK", "KILOBYTE", "KNITTING", "KNOCKOFF", "KILOGRAM", "KNOCKOUT", "LACROSSE", "LANDLORD", "LAUGHTER", "LAUREATE", "LAVENDER", "LADYLIKE", "LANDMARK", "LATITUDE", "LAWMAKER", "LAMINATE", "LANDFILL", "LANGUAGE", "LEMONADE", "LIBATION", "LIFELIKE", "LEGALITY", "LENGTHEN", "LEVERAGE", "LICORICE", "LIFELINE", "LEFTOVER", "LEGALIZE", "LIBRETTO", "LIFEBOAT", "LIFELONG", "LIFETIME", "LINGERIE", "LITIGANT", "LIGAMENT", "LIKEWISE", "LINESMAN", "LIVEABLE", "LOBBYIST", "LOCATION", "LIKEABLE", "LITERATE", "LOLLIPOP", "LOVEABLE", "LUMINOUS", "LOVEBIRD", "LYRICIST", "LOVELORN", "LUNCHEON", "LUSTROUS", "MACARONI", "MACHISMO", "MADHOUSE", "MADRIGAL", "MAGNETIC", "MAINLAND", "MAINTAIN", "MALARKE", "MANICURE", "MARATHON", "MAGNOLIA", "MAHJONGG", "MAINLINE", "MAJORITY", "MANDIBLE", "MANGROVE", "MANIFEST", "MANTILLA", "MARAUDER", "MAJESTIC", "MALAMUTE", "MANDARIN", "MANIFOLD", "MANTISSA", "MARGINAL", "NARINATE", "MARKSMAN", "MARRIAGE", "MATCHBOX", "MARIGOLD", "MARZIPAN", "MASSACRE", "MASTODON", "MAXIMIZE", "MARIACHI", "MARIPOSA", "MARSHALL", "MARTINET", "MASCHERA", "MASSEUSE", "MASTHEAD", "MATERIAL", "MEDIEVAL", "MEMORIZE", "MENISCUS", "MENTALLY", "MERENGUE", "MECHANIC", "MEDIATOR", "MEDIOCRE", "MEGAWATT", "MELTDOWN", "MEMORIAL", "MERCHANT", "MEDICATE", "MEDITATE", "MERCIFUL", "MESQUITE", "METEORIC", "METHINKS", "MILITANT", "MINIMIZE", "MINORITY", "METALLIC", "MIDNIGHT", "MIGRAINE", "MILITARY", "MILLENIA", "MINOTAUR", "MISHEARD", "METAPHOR", "MIDPOINT", "MILITATE", "MILLINER", "MINISTER", "MINSTREL", "MISOGYNY", "MISSPELL", "MITIGATE", "MNEMONIC", "MOLESTED", "MONGOOSE", "MISMATCH", "MISPLACE", "MISTREAT", "MOCCASIN", "MODESTLY", "MODULATE", "MOLECULE", "MONARCHY", "MONETARY", "MISTRESS", "MOBILITY", "MODALITY", "MODIFIED", "MOISTURE", "MONOGAMY", "MONOTONY", "MONUMENT", "MOURNING", "MOVEABLE", "MONOLITH", "MONOPOLY", "MOONBEAM", "MORALITY", "MORTUARY", "MOUSSAKA", "MOVEMENT", "MUENSTER", "MULBERRY", "MONORAIL", "MORIBUND", "MORTGAGE", "MOSQUITO", "MOTORIST", "MUNITION", "MUSICIAN", "MUTUALLY", "MYSTICAL", "MULTIPLE", "MUSHROOM", "MUTATION", "MYSTIQUE", "MULTIPLY", "MUSICALE", "MUTILATE", "MYTHICAL"]
        },
        {   
          cat: "9-Letter Words",
          sel: false,
          parent: "",
          numOfItems: 0,
          items: ["AVAILABLE", "FOLLOWING", "INSURANCE", "FINANCIAL", "COMMITTEE", "PRESIDENT", "SOLUTIONS", "SUBSCRIBE", "PUBLISHED", "COUNTRIES", "INSTITUTE", "SELECTION", "DOCUMENTS", "THEREFORE", "EXCELLENT", "LOCATIONS", "CHARACTER", "INCREASED", "TRANSPORT", "SITUATION", "SATELLITE", "CONTINUED", "COPYRIGHT", "DIFFERENT", "EQUIPMENT", "REFERENCE", "TECHNICAL", "TREATMENT", "CORPORATE", "SPONSORED", "EXECUTIVE", "FURNITURE", "OPERATING", "INTERFACE", "PROVIDING", "RELATIONS", "BEGINNING", "GALLERIES", "EMERGENCY", "RECOMMEND", "COMPONENT", "EDUCATION", "INCLUDING", "IMPORTANT", "AGREEMENT", "STATEMENT", "KNOWLEDGE", "CUSTOMERS", "POLITICAL", "CONDITION", "NECESSARY", "STRUCTURE", "DEVELOPED", "WORLDWIDE", "OPERATION", "AUTHORITY", "COMPLETED", "SUBMITTED", "SPECIFIED", "PRESENTED", "DESCRIBED", "PROFESSOR", "GUARANTEE", "COMMUNITY", "DIRECTORY", "SOMETHING", "MARKETING", "CURRENTLY", "ADVERTISE", "EFFECTIVE", "ACCORDING", "POTENTIAL", "TELEPHONE", "PUBLISHER", "BEAUTIFUL", "OTHERWISE", "REGARDING", "SOMETIMES", "ATTENTION", "DIFFICULT", "GENERALLY", "ZEITGEIST", "ZINFANDEL", "ZEALOUSLY", "ZIRCONIUM", "ZOOLOGIST", "XYLOPHONE", "XENOPHOBE", "YACHTSMAN", "YARDSTICK", "YESTERDAY", "YOUNGSTER", "YELLOWING", "YAMMERING", "QUADRUPLE", "QUALIFIES", "QUARTERLY", "QUERULOUS", "QUICKNESS", "QUINTUPLE", "QUADRATIC", "QUARRELED", "QUICKSAND", "QUOTATION", "QUADRILLE", "QUALIFIED", "QUIVERING", "QUOTIDIAN", "QUALIFIER", "QUIESCENT", "QUIZZICAL", "ABDUCTION", "ABOLITION", "ACAPPELLA", "ACCESSORY", "ACCORDING", "ACQUITTAL", "ACTIVATOR", "ACTUALIZE", "ADJOINING", "ADMISSION", "ADULTHOOD", "ADVIDEDLY", "AFFECTION", "AFFILIATE", "AFTERGLOW", "AFTERWARD", "AGGREGATE", "AGITATION", "AGREEMENT", "ALBATROSS", "ALCHEMIST", "ALLERGIST", "ALLIGATOR", "ALLOWABLE", "AMBITIOUS", "AMPHIBIAN", "ANECDOTAL", "ANTHOLOGY", "ANTIPASTO", "ANTITOXIN", "ANTIVIRUS", "ANXIOUSLY", "APATHETIC", "APOLOGIST", "APPENDAGE", "APPETIZER", "APPLIANCE", "ARBITRATE", "ARCHANGEL", "ARCHIVIST", "ARMISTICE", "ASCENDENT", "ASCERTAIN", "ASPARAGUS", "ASSERTIVE", "ASTRONOMY", "ATROCIOUS", "ATTENUATE", "AUTOMATON", "AUXILLARY", "AVOCATION", "BACKDATED", "BACKSWING", "BAMBOOZLE", "BAPTISMAL", "BARTENDER", "BASEBOARD", "BASICALLY", "BATHHOUSE", "BEDEVILED", "BEDSPREAD", "BEHAVIOUR", "BENCHMARK", "BILATERAL", "BILLBOARD", "BIOLOGIST", "BLACKBALL", "BLATANTLY", "BLUEBERRY", "BLUEPRINT", "BOLSHEVIK", "BOOGEYMAN", "BOOKMAKER", "BOTANICAL", "BRASSERIE", "BREAKAWAY", "BRICKYARD", "BRIEFCASE", "BROADSIDE", "BRONSHIAL", "BULLFINCH", "BUTTERCUP", "BYPRODUCT", "CACOPHONY", "CALIPHATE", "CANDIDATE", "CAPTIVATE", "CARETAKER", "CARNATION", "CARPENTRY", "CARTILAGE", "CATECHISM", "CELESTIAL", "CENSORIAL", "CERTAINTY", "CERTITUDE", "CHAIRLIFT", "CHANTILLY", "CHARBROIL", "CHASTENED", "CHECKBOOK", "CHECKMATE", "CHICANERY", "CHILDHOOD", "CHOCOLATE", "CHOPHOUSE", "CHROMATIC", "CIVILISED", "CLASSICAL", "CLASSROOM", "CLEARANCE", "CLINICIAN", "COALITION", "COEXISTED", "COFOUNDER", "COGNIZANT", "COLLECTOR", "COLOSSEUM", "COMPETENT", "COMPLIANT", "CONCEALED", "CONFIGURE", "CONJUGATE", "CONTAINED", "CONUMDRUM", "COPYRIGHT", "CORPORATE", "CORROSIVE", "COUNSELOR", "COURTSIDE", "CREDULITY", "CRITERION", "CRITICIZE", "CROCODILE", "CROSSOVER", "CULTIVATE", "DACHSHUND", "DANGEROUS", "DECADENCE", "DECEPTIVE", "DAMNATION", "DAREDEVIL", "DECATHLON", "DECLINING", "DECREMENT", "DEDUCTIVE", "DEFENSIVE", "DELIGHTED", "DEFENDANT", "DEJECTION", "DECOMPOSE", "DEFECTION", "DELEGATED", "DEODORANT", "DEPRESSED", "DESIGNATE", "DEPICTION", "DESERTION", "DESPOTISM", "DEMOCRACY", "DEPRAVITY", "DESECRATE", "DESPERATE", "DETENTION", "DIAGNOSIS", "DICHOTOMY", "DESTROYER", "DETERGENT", "DEVASTATE", "DIAPHRAGM", "DIFFERENT", "DESULTORY", "DETECTIVE", "DETERMINE", "DEVIATION", "DIFFICULT", "DIGNIFIED", "DINOSAURS", "DIRECTION", "DISBELIEF", "DISCOURSE", "DIGESTION", "DIGNITARY", "DIRECTIVE", "DISAPPEAR", "DISFIGURE", "DIMWITTED", "DIPHTHONG", "DISCOVERY", "DISHONEST", "DISPARAGE", "DISSIDENT", "DISSIPATE", "DISLOCATE", "DISSONANT", "DISTILLER", "DIVERSIFY", "DISINFECT", "DISPARITY", "DISREGARD", "DIVERSION", "DIVISIBLE", "DOWNGRADE", "DOWNSWING", "DOCTRINAL", "DOUBTLESS", "DOWNRIGHT", "DRAGONFLY", "DIZZINESS", "DOMINANCE", "DORMITORY", "DOWNRIVER", "DRACONIAN", "DRAMATIST", "DRINKABLE", "DRUMSTICK", "DUTIFULLY", "DYSPHORIA", "DRAINPIPE", "DRAMATIZE", "DREAMLIKE", "DUBIOUSLY", "DRIFTWOOD", "DRUGSTORE", "DUPLICATE", "DYSTOPIAN", "EAGERNESS", "ECCENTRIC", "ECONOMICS", "EDWARDIAN", "ELECTRODE", "EARTHWORM", "ECOSYSTEM", "EFFICIENT", "ELECTORAL", "EARTHLING", "EAVESDROP", "ECONOMIST", "EFFECTIVE", "EGOMANIAC", "ELECTABLE", "ELEGANTLY", "ELEVATION", "ELIMINATE", "EMBARRASS", "EMINENTLY", "ENCOUNTER", "ELOQUENCE", "EMBROILED", "EMOTIONAL", "ENCLOSURE", "ENCOURAGE", "ENDEARING", "ELSEWHERE", "EMBATTLED", "EMPATHIZE", "ENDLESSLY", "ENDOWMENT", "ENTANGLED", "ENERGETIC", "ENERGIZER", "ENJOYABLE", "ENLIGHTEN", "ENUNCIATE", "EQUIPMENT", "ENVELOPED", "EPITOMIZE", "EQUITABLY", "ERRONEOUS", "EQUIVOCAL", "ERSTWHILE", "ESPIONAGE", "ETHICALLY", "EVERYBODY", "EXCALIBUR", "ESTABLISH", "EVAPORATE", "EXCELLENT", "EXCEPTION", "ESTRANGED", "ETERNALLY", "ETIQUETTE", "EXCAVATOR", "EXCERCISE", "EXCLUSIVE", "EXCURSION", "EXHAUSTED", "EXPENSIVE", "EXCLAIMED", "EXECUTIVE", "EXEMPTION", "EXISTENCE", "EXPANSION", "EXPEDIENT", "EXPLOSIVE", "EXEMPLARY", "EXPANSIVE", "EXPIATION", "EXPRESSED", "EXQUISITE", "EXTREMIST", "EXUBERANT", "EXTORTION", "EXTRADITE", "EXPRESSLY", "EXTREMELY", "FACTORIAL", "FASCINATE", "FATTENING", "FEATHERED", "FEDERATED", "FABRICATE", "FACETIOUS", "FANATICAL", "FANTASIZE", "FACSIMILE", "FALSEHOOD", "FAVORABLE", "FELONIOUS", "FERTILIZE", "FILMSTRIP", "FIREPOWER", "FIRSTHAND", "FITTINGLY", "FERMENTED", "FERVENTLY", "FIDUCIARY", "FIREHOUSE", "FIREPROOF", "FIREWORKS", "FEUDALISM", "FINANCIAL", "FINGERTIP", "FIRMAMENT", "FLAMMABLE", "FLOWCHART", "FLUCTUATE", "FOOLHARDY", "FLASHBACK", "FLAVORFUL", "FOLLOWING", "FOOLISHLY", "FOREIGNER", "FORTUNATE", "FRACTIOUS", "FOREFRONT", "FORGETFUL", "FORMALITY", "FORMATION", "FORBIDDEN", "FORGIVING", "FORMALIZE", "FORTITUDE", "FRUGALITY", "FURNITURE", "FRAGRANCE", "FRAMEWORK", "FREIGHTER", "FRIVOLITY", "FRUITCAKE", "FURIOUSLY", "FRANCHISE", "FREESTYLE", "FRICASSEE", "FRIVOLOUS", "FROSTBITE", "FRUITLESS", "FUNICULAR", "FURNISHED", "FURTIVELY", "GAINFULLY", "GENEALOGY", "GENERATOR", "GEOLOGIST", "GEIRATRIC", "GARRULOUS", "GATEHOUSE", "GENERALLY", "GEOMETRIC", "GERMANIUM", "GERMINATE", "GESTATION", "GIBBERISH", "GLADIATOR", "GLANDULAR", "GLASSWORK", "GODPARENT", "GRADUALLY", "GODFATHER", "GOLDFINCH", "GOVERNESS", "GRADUATED", "GRATITUDE", "GROTESQUE", "GUARDRAIL", "GREATNESS", "GREENHORN", "GREGORIAN", "GUARANTEE", "GUIDEBOOK", "GRAPEVINE", "GUIDELINE", "GYMNASIUM", "GYMNASTIC", "HALLOWEEN", "HANDIWORK", "HAPPINESS", "HARLEQUIN", "HAIRBRUSH", "HAIRSPRAY", "HAPHAZARD", "HANDCUFFS", "HARBINGER", "HARMONICA", "HEADPHONE", "HAZARDOUS", "HEREAFTER", "HERBICIDE", "HIBERNATE", "HINDRANCE", "HISTORIAN", "HERBIVORE", "HIGHLIGHT", "HILLBILLY", "HISTOGRAM", "HOMEMAKER", "HOMICIDAL", "HONEYMOON", "HOROSCOPE", "HUMONGOUS", "HUNCHBACK", "HOMESTEAD", "HORRIFIED", "HOUSEWIFE", "HOLOGRAPH", "HONORABLE", "HORSEBACK", "HORSEPLAY", "HOUSEHOLD", "HUMDINGER", "HYPNOTISM", "HYPNOTIST", "HYPOCRITE", "HYDRAULIC", "HYDROLOGY", "HYPHENATE", "IDEOLOGUE", "IGNORANCE", "IDIOMATIC", "IDENTICAL", "ILLEGALLY", "IMAGINARY", "IMMIGRANT", "IMMUTABLE", "IMPERFECT", "IMPETUOUS", "IMPOTENCE", "IMPROVISE", "IMPULSIVE", "IMITATION", "IMPARTIAL", "IMPROMPTU", "IMPRUDENT", "INABILITY", "IMBROGLIO", "IMMEDIATE", "IMMERSION", "IMPORTANT", "IMPUDENCE", "INCARNATE", "INCLEMENT", "INCURABLE", "INDUCTION", "INFERENCE", "INFIRMARY", "INAUDIBLE", "INCENTIVE", "INCLUSIVE", "INDIGNANT", "INDUCTIVE", "INAUGURAL", "INCEPTION", "INCURSION", "INDEMNIFY", "INFECTION", "INFLATION", "INFLUENCE", "INFURIATE", "INNOCUOUS", "INSERTION", "INSINUATE", "INSPECTOR", "INITIALLY", "INSIDIOUS", "INSOLVENT", "INFORMANT", "INGENIOUS", "INJECTION", "INTENSION", "INTERCEPT", "INTERLUDE", "INTERPLAY", "INSURANCE", "INTEGRATE", "INTENSITY", "INTERJECT", "INTERVIEW", "INSTANTLY", "INSTITUTE", "INTEGRITY", "INTENSELY", "INTERPRET", "INTRICATE", "INTUITION", "INVENTIVE", "INVIDIOUS", "INTROVERT", "INTRUSIVE", "ISOLATION", "INVENTORY", "INVISIBLE", "ITALICIZE", "ITERATION", "ITINERANT", "ITINERARY", "JELLYBEAN", "JAMBALAYA", "JELLYFISH", "JUDICIARY", "KILOHERTZ", "KILOMETER", "KERFUFFLE", "LABYRINTH", "LABORIOUS", "LAMINATED", "LAMPSHADE", "LECHEROUS", "LAMPLIGHT", "LARGHETTO", "LAYPERSON", "LANDOWNER", "LAUNDRESS", "LAWNMOWER", "LEAKPROOF", "LIBERTINE", "LIKELIEST", "LEGENDARY", "LETHARGIC", "LIBERATOR", "LIMESTONE", "LEVIATHAN", "LIBRARIAN", "LIMITLESS", "LIMOUSINE", "LIQUIDATE", "LOCKSMITH", "LIQUIDITY", "LONGEVITY", "LONGITUDE", "LOGICALLY", "LUCRATIVE", "LUBRICANT", "LUBRICATE", "LUXURIANT", "LYRICALLY", "MACADAMIA", "MACHINIST", "MAGNETISM", "MAGNITUDE", "MAJORDOMO", "MALADROIT", "MACINTOSH", "MAGICALLY", "MAINFRAME", "MAJORETTE", "MACHINERY", "MAELSTROM", "MAGNETIZE", "MAHARAJAH", "MAKESHIFT", "MADDENING", "MAHARISHI", "MALICIOUS", "MANIFESTO", "MANLINESS", "MARKETING", "MARSHLAND", "MANDOLINE", "MANNEQUIN", "MARGARINE", "MARMALADE", "MARSUPIAL", "MALLEABLE", "MARGARITA", "MANDATORY", "MANNERISM", "MARTYRDOM", "MASCULINE", "MASSIVELY", "MECHANISM", "MEDALLION", "MEDICALLY", "MEGABUCKS", "MASOCHISM", "MASTERFUL", "MATRIARCH", "MECHANIZE", "MEDIATION", "MEGABYTES", "MARVELOUS", "MASOCHIST", "MEDICINAL", "MEGAPHONE", "MATCHBOOK", "MATRIMONY", "MECHANICS", "MEGAHERTZ", "MELATONIN", "MELODIOUS", "MEMORABLE", "MENDICANT", "MERCENARY", "MEZZANINE", "MELODRAMA", "MENAGERIE", "MESMERISM", "MENDACITY", "MENNONITE", "MERCILESS", "MESMERIZE", "MESSENGER", "METABOLIC", "METEORITE", "METHODIST", "METRONOME", "MENTALIST", "MERCURIAL", "MICROCOSM", "MICROWAVE", "MINCEMEAT", "MINIMALLY", "MINUSCULE", "MISERABLE", "MISGUIDED", "MICROFILM", "MILESTONE", "MILKSHAKE", "MINUTEMAN", "MISJUDGED", "MICROCHIP", "MIDDLEMAN", "MIGRATION", "MILLENIUM", "MINIATURE", "MINISCULE", "MISBEHAVE", "MISPLACED", "MIDSTREAM", "MIGRATORY", "MILLENNIA", "MILLIGRAM", "MINISKIRT", "MISCREANT", "MISGIVING", "MISTLETOE", "MOMENTOUS", "MNEMONICS", "MODERATOR", "MODERNITY", "MODERNIZE", "MONASTERY", "MONOLOGUE", "MODULATOR", "MONOGRAPH", "MONSTROUS", "MOUNTAINS", "MOUSTACHE", "MOONLIGHT", "MOTORBIKE", "MOTIVATOR", "MOUTHWASH", "MOONSHINE", "MUCKRAKER", "MUSICALLY", "MYTHOLOGY", "MULTIPLEX", "MULTITUDE", "MUSKETEER", "MYSTICISM", "MUNICIPAL", "MURDEROUS", "MYSTIFIED"]
        },
          {   
            cat: "10-Letter Words",
            sel: false,
            parent: "",
            numOfItems: 0,
            items: ["UNIVERSITY", "DEPARTMENT", "ACTIVITIES", "DISCUSSION", "EVERYTHING", "REGISTERED", "ELECTRONIC", "INVESTMENT", "POPULATION", "CONNECTION", "CONSIDERED", "COMPONENTS", "BACKGROUND", "THROUGHOUT", "PROCEDURES", "LITERATURE", "AUTOMOTIVE", "HISTORICAL", "DICTIONARY", "GENERATION", "INTEGRATED", "DETERMINED", "APPLICABLE", "MANAGEMENT", "ADDITIONAL", "COLLECTION", "PRODUCTION", "PROTECTION", "PARTICULAR", "INDUSTRIAL", "NAVIGATION", "ENTERPRISE", "ASSISTANCE", "THEMSELVES", "RESPECTIVE", "SUCCESSFUL", "SCIENTIFIC", "ACCOUNTING", "COMPLIANCE", "MULTIMEDIA", "BASKETBALL", "TECHNOLOGY", "CONFERENCE", "COMMERCIAL", "EMPLOYMENT", "ASSOCIATED", "ASSESSMENT", "PROCESSING", "DISCLAIMER", "TELEVISION", "EVALUATION", "DEFINITION", "DIFFERENCE", "PUBLISHING", "FUNCTIONAL", "ACCEPTANCE", "LEADERSHIP", "COMPLETELY", "IDENTIFIED", "GOVERNMENT", "EXPERIENCE", "INDIVIDUAL", "NEWSLETTER", "COMMISSION", "STATISTICS", "FOUNDATION", "UNDERSTAND", "ESPECIALLY", "RESOLUTION", "MEMBERSHIP", "INTERESTED", "RESTAURANT", "NETWORKING", "DEVELOPING", "PERMISSION", "DESIGNATED", "COMPARISON", "ELECTRICAL", "FREQUENTLY", "ABANDONING", "ABDICATION", "ABOLISHING", "ABORIGINAL", "ABSOLUTISM", "ABSORBENCY", "ACCELERATE", "ACCEPTANCE", "ACCUSATION", "ACCUSTOMED", "ACQUIESCES", "ADAPTATION", "ADJECTIVAL", "ADJUSTMENT", "ADMISSIBLE", "ADOLESCENT", "ADULTERESS", "ADVENTURER", "ADVOCATING", "AFFLICTION", "AFTERWARDS", "AGGRANDIZE", "AGGREGATED", "AGGRESSIVE", "AGRONOMIST", "ALCOHOLISM", "ALIMENTARY", "ALLEGATION", "AMBASSADOR", "AMBULATORY", "AMPLIFYING", "ANNIHILATE", "ANTAGANISM", "ANTISOCIAL", "ANTITHETIC", "APOCRYPHAL", "APOPLECTIC", "APOTHEOSIS", "APPARITION", "APPETISING", "APPRECIATE", "ARCHEOLOGY", "ARCTANGENT", "ARISTOCRAT", "ASSISTANCE", "ASSORTMENT", "ASTONISHED", "ASTROLOGER", "ASTRONOMIC", "ATMOSPHERE", "AUSPICIOUS", "AUTOCRATIC", "AUTOMOTIVE", "BAGATELLES", "BALLOONIST", "BANKROLLED", "BARRENNESS", "BEATITUDES", "BEDEVILLED", "BELLADONNA", "BENEFITING", "BIOCHEMIST", "BITUMINOUS", "BLACKBERRY", "BLOODHOUND", "BLUBBERING", "BOMBARDIER", "BONDHOLDER", "BOONDOFFLE", "BRAINCHILD", "BREASTBONE", "BRONCHITIS", "BROWNSTONE", "BUFFOONERY", "BUREAUCRAT", "CALAMITOUS", "CANDLEWOOD", "CANTALOUPE", "CAPABILITY", "CAPITALIZE", "CAPPUCCINO", "CARAMELIZE", "CARDHOLDER", "CENTRALITY", "CHANCELLOR", "CHARITABLE", "CHARTREUSE", "CHEERFULLY", "CHILDPROOF", "CHRONOLOGY", "CHURCHYARD", "CLINICALLY", "CLYDESDALE", "COEXISTING", "COINCIDENT", "COLLATERAL", "COLLECTION", "COLLOQUIAL", "COMMANDANT", "COMMUNIQUE", "COMPARISON", "COMPATRIOT", "COMPETENCE", "COMPLEMENT", "COMPLETION", "COMPLIMENT", "COMPROMISE", "CONCLUSION", "CONCOCTION", "CONDESCEND", "CONFISCATE", "CONSENSUAL", "CONSISTENT", "CONTORTION", "CONTRITION", "CONVENTION", "CONVERSELY", "CORNSTARCH", "CORONATION", "CORRUGATED", "COURAGEOUS", "CREATIVITY", "CRUSTACEAN", "CURBACEOUS", "DEALLOCATE", "DEBAUCHERY", "DECIMATION", "DECOMPRESS", "DEFAMATION", "DEFINITION", "DELINEATOR", "DEPENDABLE", "DEPOPULATE", "DEPRESSION", "DESOLATION", "DIABOLICAL", "DIFFERENCE", "DIRECTNESS", "DISCOLORED", "DISHWASHER", "DISMISSIVE", "DISPLEASED", "DISRUPTION", "DISTILLERY", "DISTORTION", "DISTURBING", "DRESSMAKER", "DROWSINESS", "EFFORTLESS", "EGOCENTRIC", "ELECTRICAL", "ELEMENTARY", "ELLIPTICAL", "EARTHBOUND", "EGYPTOLOGY", "ELDERBERRY", "EMANCIPATE", "EMBARRASED", "EMPATHETIC", "ENCRYPTION", "EMPATHIZED", "EMPIRICISM", "ENCOURAGED", "ENROLLMENT", "ENTOMOLOGY", "ENGAGEMENT", "ENTERPRISE", "EPIGLOTTIS", "EQUANIMITY", "ERGONOMICS", "EROTICALLY", "ESCALATION", "ESCARPMENT", "ESPECIALLY", "EVERYWHERE", "EVISCERATE", "EXACERBATE", "EXCITEMENT", "EXERCISING", "EXHAUSTION", "EVACUATION", "EVENHANDED", "EXASPERATE", "EXCELLENCE", "EXORBITANT", "EXPEDIENCY", "EXPEDITION", "EXPLICITLY", "EXPOSITION", "EYEGALSSES", "EXPENDABLE", "EXPRESSION", "EXTINCTION", "EYEWITNESS", "FACILITATE", "FAHRENHEIT", "FALLACIOUS", "FASTIDIOUS", "FEDERALISM", "FAIRGROUND", "FATHERLAND", "FELLOWSHIP", "FAITHFULLY", "FARFETCHED", "FAVORITISM", "FILIBUSTER", "FLAMBOYANT", "FLIRTATION", "FIGURATIVE", "FINGERNAIL", "FLAMEPROOF", "FLASHLIGHT", "FIGUREHEAD", "FLOORBOARD", "FLOURISHED", "FLOODLIGHT", "FLORENTINE", "FOREFINGER", "FLOODPLAIN", "FOREGROUND", "FORESHADOW", "FORTHRIGHT", "FORTUITOUS", "FRATERNITY", "FRIENDSHIP", "FORTISSIMO", "FRIGHTENED", "FOUNDATION", "FRUITFULLY", "FUTURISTIC", "GENETICIST", "GEOGRAPHER", "GENERALIZE", "GEOCENTRIC", "GEOGRAPHIC", "GESUNDHEIT", "GENEROSITY", "GEOLOGICAL", "GORGONZOLA", "GRAMOPHONE", "GOALKEEPER", "GOVERNANCE", "GIRLFRIEND", "GLIMMERING", "GOALTENDER", "GRADUATION", "GRANDCHILD", "GRATIFYING", "GUARANTEED", "GYMNASTICS", "GRANDSTAND", "GROUNDLESS", "GROUNDWORK", "GUESTHOUSE", "GYROSCOPIC", "GRAPEFRUIT", "GRATUITOUS", "GREENHOUSE", "GROUPTHINK", "GUESTIMATE", "HABITATION", "HANDMAIDEN", "HARDBOILED", "HEADHUNTER", "HEADMASTER", "HABITUALLY", "HANDSPRING", "HEADSTRONG", "HABITUATED", "HANDICRAFT", "HARDHEADED", "HEADWATERS", "HEARTBREAK", "HEROICALLY", "HEARTTHROB", "HEREDITARY", "HELICOPTER", "HENCEFORTH", "HERETOFORE", "HIEROGLYPH", "HIGHWAYMAN", "HINTERLAND", "HOMEOPATHY", "HINDERANCE", "HOMOGENOUS", "HIGHSCHOOL", "HIPPODROME", "HITCHHIKER", "HOMOPHONIC", "HOSPITABLE", "HOUSEPLANT", "HORSEPOWER", "HOUSEGUEST", "HUMORESQUE", "HORRENDOUS", "HUMANISTIC", "HYPERSONIC", "HYPODERMIC", "HYPOTENUSE", "HYSTERICAL", "HYPOTHESIS", "ICONOCLASM", "IDENTIFIES", "ILLITERATE", "IMMACULATE", "ICONOCLAST", "IMAGINABLE", "IDEALISTIC", "ILLUMINATE", "IMMATURITY", "IMPEDIMENT", "IMPORTANCE", "INACTIVITY", "IMMODERATE", "IMMUNOLOGY", "IMPASSABLE", "IMPECCABLE", "IMPERSONAL", "IMPOVERISH", "INCENDIARY", "IMPERATIVE", "IMPERVIOUS", "IMPOSSIBLE", "IMPRESSIVE", "INACCURATE", "INDECISION", "INDUSTRIAL", "INCIDENTAL", "INDIVIDUAL", "INELIGIBLE", "INEVITABLE", "INEXORABLY", "INFECTIOUS", "INCIDENTLY", "INCOHERENT", "INCREDIBLE", "INDICATION", "INDICTMENT", "INDISCREET", "INFALLIBLE", "INITIALISE", "INQUISITOR", "INFINITELY", "INFALTABLE", "INHALATION", "INITIALIZE", "INITIATIVE", "INGREDIENT", "INHIBITION", "INJUNCTION", "INORDINATE", "INTERESTED", "INTERLACED", "INSIGHTFUL", "INSTRUCTOR", "INTERLOPER", "INSTRUMENT", "INTERMEZZO", "INTERNALLY", "INTERNSHIP", "INTIMIDATE", "INVINCIBLE", "INVOCATION", "INTERWOVEN", "INVALIDATE", "INVESTMENT", "INTERNMENT", "INTERWEAVE", "INTESTINAL", "INTONATION", "INTRAMURAL", "INVITATION", "IRIDESCENT", "ISOTHERMAL", "IRONICALLY", "IRRELEVANT", "IRRITATION", "IRRIGATION", "JABBERWOCK", "JUGGERNAUT", "JACKHAMMER", "JAWBREAKER", "JOURNEYMAN", "JACKRABBIT", "JEOPARDIZE", "JOURNALISM", "JUBILATION", "KNIGHTHOOD", "KRYPTONITE", "LABORATORY", "LACERATION", "LAMINATION", "LANDHOLDER", "LARYNGITIS", "LAWBREAKER", "LACKLUSTER", "LANDLOCKED", "LASCIVIOUS", "LANDLUBBER", "LANUDROMAT", "LEADERLESS", "LEDERHOSEN", "LENGTHWISE", "LIBRETTIST", "LIMITATION", "LINGUISTIC", "LEGISLATOR", "LIEUTENANT", "LIGHTENING", "LIKEMINDED", "LEGIBILITY", "LEGITAMACY", "LETTERHEAD", "LIBERALISM", "LIBERATION", "LIGHTHOUSE", "LIKABILITY", "LINEBACKER", "LOCOMOTION", "LONELINESS", "LOQUACIOUS", "LIVELIHOOD", "LITERATURE", "LOGGERHEAD", "LUGUBRIOUS", "MAINTAINED", "MALEFACTOR", "MALTHUSIAN", "MAGNETIZED", "MALODOROUS", "MANICURIST", "MANIPULATE", "MANUSCRIPT", "MAGNIFICAT", "MAINSPRING", "MALEVOLENT", "MANAGEABLE", "MANIACALLY", "MARBLEIZED", "MARTINGALE", "MATRIARCHY", "MECHANICAL", "MEDDLESOME", "MEDICATION", "MARASCHINO", "MASTERMIND", "MAYONNAISE", "MEANINGFUL", "MEDIOCRITY", "MARGINALLY", "MARVELLOUS", "MASQUERADE", "MARCHMAKER", "MEASURABLE", "MECHANIZED", "MEMBERSHIP", "MERCANTILE", "METHODICAL", "MELANCHOLY", "METABOLIZE", "METICULOUS", "MEMORANDUM", "METALLURGY", "MICROPHONE", "MIDDLEBROW", "MILITARILY", "MILLENNIUM", "MINDLESSLY", "MINERALOGY", "MIRACULOUS", "MIDWESTERN", "MINESTRONE", "MISALIGNED", "MISCELLANY", "MISFORTUNE", "MISMATCHED", "MOLYBDENUM", "MONOLITHIC", "MISCONDUCT", "MITICATION", "MODERATELY", "MODULATION", "MISHANDLED", "MISLEADING", "MISSPELLED", "MONARCHIST", "MONOGAMOUS", "MONOPOLIZE", "MOONSTRUCK", "MONOTONOUS", "MOTHERSHIP", "MOTIVATION", "MOUTHPIECE", "MORATORIUM", "MOTHERHOOD", "MOZZARELLA", "MULTIMEDIA", "MUNIFICENT", "MUSICALITY", "MUSICOLOGY", "MYSTERIOUS", "MYSTICALLY"]
            },
            {   
              cat: "11-Letter Words",
              sel: false,
              parent: "",
              numOfItems: 0,
              items: ["INFORMATION", "APPLICATION", "ENVIRONMENT", "APPROPRIATE", "RESTAURANTS", "PUBLICATION", "ESTABLISHED", "INTERESTING", "COMMUNITIES", "IMPROVEMENT", "DISCUSSIONS", "SUGGESTIONS", "LEGISLATION", "COMBINATION", "INTERRACIAL", "DIFFERENCES", "COLLECTIONS", "PROCEEDINGS", "AUTHORITIES", "RECOGNITION", "PERSPECTIVE", "EFFECTIVELY", "IMPLEMENTED", "ANNIVERSARY", "DEVELOPMENT", "PERFORMANCE", "ADVERTISING", "RESPONSIBLE", "SIGNIFICANT", "PHOTOGRAPHY", "PROGRAMMING", "INDIVIDUALS", "TEMPERATURE", "INTERACTIVE", "DESTINATION", "REPLACEMENT", "DISTRIBUTED", "COMPETITIVE", "MATHEMATICS", "PARTICIPATE", "TRANSACTION", "RESERVATION", "DESCRIPTION", "ASSOCIATION", "INDEPENDENT", "EDUCATIONAL", "RECOMMENDED", "COMPETITION", "RESIDENTIAL", "AGRICULTURE", "PREPARATION", "EXPERIENCED", "ENFORCEMENT", "EXAMINATION", "MEASUREMENT", "COMFORTABLE", "COOPERATION", "CONSUMPTION", "ELECTRONICS", "CORPORATION", "OPPORTUNITY", "ALTERNATIVE", "MAINTENANCE", "TRADITIONAL", "CERTIFICATE", "IMMEDIATELY", "INTEGRATION", "PARTNERSHIP", "TRANSLATION", "CONSTITUTES", "MARKETPLACE", "INSTRUCTION", "INSTITUTION", "REQUIREMENT", "OUTSTANDING", "MERCHANDISE", "INTERACTION", "ACQUISITION", "LEGSILATIVE", "ABANDONMENT", "ABOMINATION", "ACADEMICIAN", "ACCLAMATION", "ACCOMPANIST", "ACQUISITION", "ADDRESSABLE", "ADVENTUROUS", 'AERONAUTICS', "AFFICIONADO", "AGGREGATING", "AGORAPHOBIA", "AHISTORICAL", "ALLEGORICAL", "ALLEVIATION", "ALTERNATELY", "AMALGAMATED", "ANECDOTALLY", "ANTIBIOTICS", "ANTIOXIDANT", "ANXIOUSNESS", "APPLICATION", "APPROVINGLY", "ARCHAEOLOGY", "ASSASSINATE", "ASSERTIVELY", "ATTENUATION", "ATTRIBUTIVE", "AUDITIONING", "BACKCOUNTRY", "BACKSLIDING", "BACKPACKING", "BARNSTORMER", "BEHAVIORISM", "BENEDICTION", "BENEFICIARY", "BEREAVEMENT", "BIBLIOPHILE", "BIFURCATION", "BLOODMOBILE", "BOILERMAKER", "BRAINTEASER", "BREADWINNER", "BULLETPROOF", "BUREAUCRACY", "BUSINESSMEN", "CANCELATION", "CANDLEPOWER", "CAPTIVATING", "CARAMELIZED", "CARBORUNDUM", "CASTIGATION", "CAULIFLOWER", "CHOCOLATIER", "CITIZENSHIP", "CLIFFHANGER", "COLLECTABLE", "COMBUSTIBLE", "COMFORTABLY", "COMPETITION", "COMPUNCTION", "CONSISTENCY", "CONTAMINANT", "CONTINUALLY", "CONTRACTUAL", "CONTRIBUTOR", "CONVERTIBLE", "COORDINATED", "CORRELATION", "CORROBORATE", "COUNTRYSIDE", "DECLARATIVE", "DEFERENTIAL", "DEGRADATION", "DENOMINATOR", "DESENSITIZE", "DESPERATION", "DEVELOPMENT", "DIALECTICAL", "DIFFICULTLY", "DIMENSIONAL", "DISARMAMENT", "DISCOGRAPHY", "DISCOURAGED", "DISCREPANCY", "DISOBEDIENT", "DISTINCTION", "DISTURBANCE", "DOCUMENTARY", "DOMINEERING", "DOWNTRODDEN", "DRASTICALLY", "DUPLICATION", "EARNESTNESS", "EDITORIALLY", "ELECTRICIAN", "ELIGIBILITY", "EMANCIPATED", "ENCHANTRESS", "ENHANCEMENT", "ENTRANCEWAY", "ESCHATOLOGY", "EUPHEMISTIC", "EVIDENTIARY", "EXASPERATED", "EXCULPATORY", "EXHORTATION", "EXPECTATION", "EXTROVERTED", "FABRICATING", "FAIRGROUNDS", "FASHIONABLY", "FLAMBOYANCE", "FLUCTUATION", "FOOLISHNESS", "FORESEEABLE", "FORGIVENESS", "FRUITLESSLY", "FUNDAMENTAL", "GASTRONOMIC", "GENEARLIZED", "GEOMETRICAL", "FHOSTWRITER", "GRANDIOSITY", "GRANULATION", "HABERDASHER", "HALFHEARTED", "HANDICRAFTS", "HANDWRITTEN", "HEARTBROKEN", "HOLLANDAISE", "HOMESTEADER", "HUMILIATING", "HYPOTHESIZE", "ICONOSTASIS", "ILLUMINATED", "ILLUSIONARY", "ILLUSTRATOR", "IMAGINATIVE", "IMMIGRATION", "IMMORTALITY", "IMPASSIONED", "IMPEACHMENT", "IMPERTINENT", "IMPULSIVELY", "INCESSANTLY", "INCONGRUOUS", "INDEPENDENT", "INDIGESTION", "INDUSTRIOUS", "INEFFICIENT", "INEXCUSABLE", "INFERIORITY", "INFLUENTIAL", "INFORMATIVE", "INHERITABLE", "INOFFENSIVE", "INQUISITION", "INSCRUTABLE", "INSINUATION", "INSPIRATION", "INSTITUTION", "INTERMINGLE", "INTERVENING", "IRREPARABLE", "JABBERWOCKY", "JUDGEMENTAL", "KINESIOLOGY", "KLEPTOMANIA", "LAMENTATION", "LUMINESCENT", "LYCANTHROPE", "MAINTENANCE", "MANUMISSION", "MARGINALIZE", "MARSHMALLOW", "MASCULINITY", "MASTERPIECE", "MATERIALISM", "MATRIARCHAL", "MEASUREMENT", "MELODICALLY", "MERITOCRACY", "MERRYMAKING", "MESMERIZING", "METEOROLOGY", "MIDDLECLASS", "MILDHEARTED", "MILLIONAIRE", "MISINFORMED", "MISTRUSTFUL", "MOISTURIZED", "MOLESTATION", "MOUNTAINOUS", "MUSCLEBOUND", "MUSTACHIOED", "MYTHOLOGIZE", "NARCOLEPTIC", "NATIONALIST", "NATIONALITY", "NATIONALIZE", "NATURALNESS", "NEEDLEPOINT", "NEGLIGENTLY", "NEARSIGHTED", "NEIGHBORING", "NEANDERTHAL", "NECESSITATE", "NECROPHILIA", "NEFARIOUSLY", "NIGHTMARISH", "NONBELIEVER", "NEOCOLONIAL", "NERVOUSNESS", "NEUROLOGIST", "NOISELESSLY", "NONCHALANCE", "NONPARTISAN", "NOURISHMENT", "NYMPHOMANIA", "NONDESCRIPT", "NUMERICALLY", "NUTRITIONAL", "OBFUSCATING", "OBLITERATED", "OBSERVATION", "OBSTRUCTION", "OPTOMETRIST", "ORIGINALIST", "OBFUSCATION", "OBSERVATORY", "OPERATIONAL", "OPPORTUNISM", "ORIGINALITY", "OBJECTIVITY", "OMNIPOTENCE", "ONTOLOGICAL", "ORCHESTRATE", "ORTHOPAEDIC", "OVERBEARING", "ORNITHOLOGY", "OUTNUMBERED", "OVERCROWDED", "OVEREXPOSED", "OVERMATCHED", "OVERPOWERED", "ORTHOPEDIST", "OUTSTANDING", "OVERWHELMED", "OVERWROUGHT", "OXIDIZATION", "PAPERHANGER", "PARENTHESES", "PANDEMONIUM", "PARATROOPER", "PARTICIPANT", "PARTNERSHIP", "PALPITATION", "PARTICIPATE", "PASTEURIZED", "PEDAGOGICAL", "PENTECOSTAL", "PERFORATION", "PERICARDIAL", "PERMISSABLE", "PATRIARCHAL", "PATRONIZING", "PENULTIMATE", "PERCOLATION", "PERICARDIUM", "PERITONITIS", "PERMISSABLE", "PENETRATION", "PERFORMANCE", "PERIPATETIC", "PERPETRATOR", "PERSONIFIED", "PHILOSOPHER", "PHOSPHOROUS", "PERPETUALLY", "PERSNICKETY", "PERSECUTION", "PERSONALITY", "PERSPECTIVE", "PESSIMISTIC", "PHILANDERER", "PHOTOSPHERE", "PLACEHOLDER", "PLACEKICKER", "PLURIPOTENT", "POLLINATION", "PLAINSPOKEN", "POLICYMAKER", "PONTIFICATE", "POSTULATION", "PREDICTABLE", "PORTABILITY", "PRACTICALLY", "PRECIPITATE", "PREDICAMENT", "PREDICTABLY", "PREDOMINANT", "PRESTIGIOUS", "PREDISPOSED", "PREHISTORIC", "PREMONITION", "PREPOSITION", "PREROGATIVE", "PRETENTIOUS", "PROBLEMATIC", "PRIZEWINNER", "PROMOTIONAL", "PROPRIETORY", "PROSELYTIZE", "PROFICIENCY", "PROHIBITION", "PROMISCUITY", "PROSECUTION", "PROCREATION", "PROGRESSION", "PROLIFERATE", "PROMISCUOUS", "PROPOSITION", "PROTAGONIST", "PROVOCATIVE", "PSYCHODELIC", "PURPORTEDLY", "PUNCTUALITY", "PROVOCATEUR", "PROXIMATION", "PSYCHIATRIC", "PSYCHOPATHY", "PYTHAGOREAN", "QUICKSILVER", "QUARRELSOME", "QUADRENNIAL", "QUARANTINED", "RANGEFINDER", "RATTLESNAKE", "READABILITY", "RATATOUILLE", "REACTIONARY", "RATIONALITY", "RECALIBRATE", "RECLAMATION", "RECONSTRUCT", "REASSURANCE", "RECOLLECTED", "RECOMMENDED", "REALIGNMENT", "RECRUITMENT", "REFORMATION", "REGRETTABLE", "REIFICATION", "REFRESHMENT", "REGURGITATE", "REFERENDUMS", "REFRIGERANT", "RELUCTANTLY", "REOCCURRING", "RELIGIOUSLY", "REMEMBRANCE", "REPETITIOUS", "REMINISCENT", "REMONSTRATE", "REPUDIATION", "RESEMBLANCE", "RESIGNATION", "RESPIRATION", "RESTITUTION", "RETRIBUTION", "REQUIREMENT", "RESOURCEFUL", "RESTORATION", "RESTRICTION", "RESURRECTED", "RESPECTABLE", "RESPIRATORY", "RESTRICTIVE", "REVERBERATE", "REVERENTIAL", "RITUALISTIC", "ROMANTICISM", "RETRIEVABLE", "SCHOLARSHIP", "SALESPERSON", "SAFECRACKER", "SCHOOLHOUSE", "SCOUTMASTER", "SCREWDRIVER", "SENSIBILITY", "SCUTTLEBUTT", "SEASONALITY", "SEDUCTIVELY", "SENTIMENTAL", "SHALLOWNESS", "SCRUMPTIOUS", "SELFISHNESS", "SENSATIONAL", "SERENDIPITY", "SHIPLIFTING", "SHORTHANDED", "SHOWMANSHIP", "SIGNIFICANT", "SKEPTICALLY", "SLEEPWALKER", "SOCIABILITY", "SHAREHOLDER", "SHORTCHANGE", "SHIPBUILDER", "SITUATIONAL", "SMORGASBORD", "SPECIFICITY", "SPECULATION", "SPONTANEOUS", "SOCIOPATHIC", "SPECTACULAR", "SPENDTHRIFT", "SPRINGBOARD", "SOLIPSISTIC", "SPONSORSHIP", "STAKEHOLDER", "STEELWORKER", "STIMULATION", "STOREKEEPER", "STATISTICAL", "STIPULATION", "STREAMLINED", "STEWARDSHIP", "STONECUTTER", "SUBJUNCTIVE", "SUBSISTENCE", "SUBTRACTION", "STRUCTURING", "SUBLIMATION", "SUBSTANDARD", "SUBORDINATE", "SUBSTANTIAL", "SUBTROPICAL", "SUPERFICIAL", "SUPERTANKER", "SUSPENSEFUL", "SUITABILITY", "SUPERMARKET", "SURROUNDING", "SUPERIORITY", "SUPERVISING", "SUPPOSITION", "SUPPRESSION", "SWEEPSTAKES", "SYMPATHETIC", "SYMPATHIZED", "SYCOPHANTIC", "SYMMETRICAL", "SYNCOPATION", "SYNDICATION", "SYTTHESIZED", "TANTALIZING", "TEMPERATURE", "TACHYCARDIA", "TAXIDERMIST", "TEMPESTUOUS", "TECHNICOLOR", "TENACIOUSLY", "TEASPOONFUL", "TELEKINESIS", "TENDENTIOUS", "TENTATIVELY", "TERMINATION", "THUNDERBIRD", "TITILLATION", "THEORETICAL", "THUNDERBOLT", "TERMINOLOGY", "THERMOMETER", "TIDDLYWINKS", "TOASTMASTER", "TESELATION", "TESTIMONIAL", "TOBACCONIST", "TRANSACTION", "TRANSLATION", "TRANSMITTAL", "TRANSFERRED", "TRANSFORMER", "TRANSPORTER", "TOWNSPEOPLE", "TRADITIONAL", "TRANSFUSION", "TREACHEROUS", "TOPOGRAPHIC", "TRANSPONDER", "TRESPASSING", "TRIUMVIRATE", "TRUSTWORTHY", "TYPOGRAPHER", "TRIANGULATE", "TRUCKDRIVER", "TREPIDATION", "TRIBULATION", "TYPEWRITING", "TURBOCHARGE", "TYPEWRITTEN", "UNANNOUNCED", "UNAVAILABLE", "ULTRAVIOLET", "UNAVOIDABLE", "UNANIMOUSLY", "UNASHAMEDLY", "UNCERTAINTY", "UNCIVILIZED", "UNCONSCIOUS", "UTILITARIAN", "VACILLATING", "VACCINATION", "VENTRICULAR", "VINAIGRETTE", "VIVISECTION", "VENTILATION", "VENTURESOME", "VOLUNTARILY", "VORACIOUSLY", "WARMHEARTED", "WASTEBASKET", "WHEELBARROW", "WINDBREAKER", "WINTERGREEN", "WORKMANSHIP", "WORKSTATION", "WHEELWRIGHT", "WRONGHEADED", "WILLINGNESS", "ZEALOUSNESS"]
              },
              {   
                cat: "12-Letter Words",
                sel: false,
                parent: "",
                numOfItems: 0,
                items: ["PROFESSIONAL", "AVAILABILITY", "PUBLICATONS", "INSTRUCTIONS", "ARCHITECTURE", "INTELLIGENCE", "SUBSCRIPTION", "CONSERVATION", "COMPENSATION", "TRANSACTIONS", "CONSULTATION", "NOTIFICATION", "SUCCESSFULLY", "COMMISSIONER", "DISABILITIES", "DESTINATIONS", "INDEPENCENCE", "REPRODUCTION", "INTERMEDIATE", "CONDITIONING", "INTERVENTION", "OCCUPATIONAL", "DEMONSTRATED", "ORGANIZATION", "INTRODUCTION", "RELATIONSHIP", "PRESENTATION", "CONTEMPORARY", "AGRICULTURAL", "SATISFACTION", "RESPECTIVELY", "OPTIMIZATION", "CHAMPIONSHIP", "CONSERVATIVE", "ANNOUNCEMENT", "JURISDICTION", "REPRESENTING", "MODIFICATION", "ALPHABETICAL", "REGISTRATION", "INSTALLATION", "PRESCRIPTION", "ENCYCLOPEDIA", "TRANSMISSION", "CONTRIBUTION", "INTELLECTUAL", "COLLECTABLES", "PRODUCTIVITY", "IMPLEMENTING", "INCREASINGLY", "METROPOLITAN", "PHOTOGRAPHER", "COMMONWEALTH", "CONSTRUCTION", "DISTRIBUTION", "MANUFACTURER", "PARTICULARLY", "SPECIFICALLY", "NEIGHBORHOOD", "CONSTITUTION", "EXPERIMENTAL", "INCORPORATED", "CONVERSATION", "PERSONALIZED", "CONVENTIONAL", "VERIFICATION", "BIBLIOGRAPHY", "MATHEMATICAL", "ACCUSATORIAL", "ACKNOWLEDGED", "ACQUISITIONS", "ABBREVIATION", "ACADEMICIANS", "ACCELERATING", "ACCUMULATIVE", "ACCIDENTALLY", "ACCOUTREMENT", "ADDLEBRAINED", "ADMINISTERED", "ADAPTIVENESS", "ADOPTABILITY", "ADJECTIVALLY", "ADJUDICATION", "ADMONISHMENT", "ADAPTABILITY", "ADVANCEMENTS", "ADVANTAGEOUS", "AFFECTIONATE", "ADVISABILITY", "AERONAUTICAL", "AFFECTATIONS", "AFORETHOUGHT", "AGGRANDIZING", "AGRIBUSINESS", "AGRICULTURAL", "AFTERTHOUGHT", "AGGRESSIVELY", "ALPHABETIZER", "ALTERNATIONS", "ALTERNATIVES", "AVARICIOUSLY", "ASYMMETRICAL", "ASYNCHRONOUS", "ATTRIBUTABLE", "AUGMENTATION", "ASYMPTOMATIC", "ATTRACTIVELY", "ATTRIBUTIONS", "AUDIOLOGISTS", "AUTHENTICATE", "ASYNCHRONISM", "AUSPICIOUSLY", "AVARICIOUSLY", "BACCHANALIAN", "BACKLIGHTINT", "BARBARICALLY", "BATTLEGROUND", "BEETHOVENIAN", "BELLIGERENCY", "BEWILDEREDLY", "BIOGRAPHICAL", "BLACKLISTING", "BREAKFASTING", "BREATHLESSLY", "BROADCASTING", "BULLFIGHTING", "BUTTERSCOTCH", "CABINETMAKER", "CANONIZATION", "CAPITULATION", "CARTOGRAPHIC", "CATERWAULING", "CHECKERBOARD", "CHILDISHNESS", "CHIROPRACTOR", "CHOREOGRAPHS", "CIRCUMSCRIBE", "CIVILIZATION", "COHESIVENESS", "COLLECTIVIST", "COMMENDATION", "COMMUNICABLE", "COMMUNICATOR", "COMPLEMENTED", "CONCATENATES", "CONCEPTIONAL" ,"CONCESSIONER", "CONCILIATORY", "CONDUCTIVITY", "CONFISCATION", "CONGRATULATE", "CONSENSUALLY", "CONSIDERABLE", "CONSOLIDATOR", "CONSTITUTING", "CONSULTATION", "CONTAMINATES", "CONTEXTUALLY", "CONTRACTIBLE", "CONTRAPUNTAL", "CONTROLLABLE", "CONVALESCENT", "CORRECTIONAL", "COURAGEOUSLY", "CRAFTSPERSON", "CRYSTALLIZED", "CUSTOMIZABLE", "DEALLOCATION", "DECENTRALIZE", "DECISIVENESS", "DECOMMISSION", "DECONGESTANT", "DEFINITIVELY", "DEHUMIDIFIER", "DELIGHTFULLY", "DEMOGRAPHICS", "DENOMINATION", "DISBURSEMENT", "DISCRIMINATE", "DISBUSTINGLY", "DISOBEDIENCE", "DISSATISFIED", "DISSERTATION", "DODECAHEDRON", "EARSPLITTING", "ECCENTRICITY", "ELECTABILITY", "ELLIPTICALLY", "ENCAPSULATES", "EMBEZZLEMENT", "ENFRANSHISED", "ENTERTAINING", "EPIGLOTTITIS", "EVOLUTIONIST", "EXAGGERATION", "EXHILARATION", "EXPLOITATION", "EXTERMINATOR", "FLAMETHROWER", "FORCEFULNESS", "FOUNTAINHEAD", "FRAUDILENTLY", "FRONTIERSMEN", "GLOBETROTTER", "GRACEFULNESS", "GRATEFULNESS", "HANDKERCHIEF", "HERITABILITY", "HIEROGLYPHIC", "HYDROTHERAPY", "HYPNOTHERAPY", "HYPOTHALAMUS", "ICONOCLASTIC", "ILLUSTRATIVE", "IMMUNOLOGIST", "IMPOVERISHED", "INAUGURATION", "INCANDESCENT", "INCOMPATIBLE", "INCONSISTENT", "INDISPUTABLY", "INDIVIDUALLY", "INEXPLICABLE", "INFLAMMATION", "INSTALLATION", "INTELLIGIBLE", "INTERCESSION", "INTERCONNECT", "INTERJECTION", "INTERMEDIATE", "INTERSECTION", "INTRODUCTORY", "INVESTIGATOR", "IRREGARDLESS", "IRRESISTABLE", "KALEIDOSCOPE", "KINDERGARTEN", "LOCALIZATION", "LONGSTANDING", "LUNCHEONETTE", "MADEMOISELLE", "MALFORMATION", "MALNOURISHED", "MATHEMATICAL", "MELODRAMITIC", "METAPHORICAL", "MISCONSTRUED", "MOBILIZATION", "MUSICOLOGIST", "MYTHOLOGICAL", "NAVIGABILITY", "NEIGHBORHOOD", "NORTHERNMOST", "OBSTETRICIAN", "OBSTREPEROUS", "OCEANOGRAPHY", "OPPRESSIVELY", "ORCHESTRATES", "ORNITHOLOGIC", "OSSIFICAITON", "OVERACHIEVER", "OVEREXTENDED", "OVERSLEEPING", "PARAMILITARY", "PATHETICALLY", "PATHOLOGICAL", "PEJORATIVELY", "PERPETRATION", "PERSPIRATION", "PHELBOTOMIST", "PHOTOGRAPHIC", "PHOTOVOLTAIC", "PIGMENTATION", "PLAINCLOTHES", "PONTIFICATES", "POSITIVENESS", "PRAISEWORTHY", "PRECOCIOUSLY", "PREDOMINANCE", "PREEMINENTLY", "PRESERVATIVE", "PRIZEFIGHTER", "PREFICIENTLY", "PROPAGANDIZE", "PROPITIOUSLY", "PROTECTORATE", "PROVINCIALLY", "PSYCHOLOGIST", "PURIFICATION", "QUANTITATIVE", "QUARTERSTAFF", "QUESTIONABLE", "QUADRAPHONIC", "QUANTIFIABLE", "QUANTITIVELY", "QUADRANGULAR", "QUIXOTICALLY", "RADIOISOTOPE", "RAMBUNCTIOUS", "RAMIFICATION", "RATIFICATION", "RATIONALISER", "REACCLIMATED", "REACTIVATION", "REACQUAINTED", "READJUSTABLE", "REALLOCATION", "READJUSTMENT", "REAUTHORIZED", "REASSURINGLY", "REBELLIOUSLY", "RECALCITRANT", "RECEIVERSHIP", "RECIPROCATED", "RECONCILIATE", "RECONNECTING", "RECONNOITRER", "RUTHLESSNESS", "ROMANTICALLY", "SACRILEGIOUS", "SARDONICALLY", "SATISFACTORY", "SAFEGUARDING", "SANITIZATION", "SCATTERBRAIN", "SCREENWRITER", "SEMANTICALLY", "SHARPSHOOTER", "SHUFFLEBOARD", "SCHOOLMASTER", "SEISMOLOGIST", "SEMIANNUALLY", "SHATTERPROOF", "SIMULCASTING", "SCRIPTURALLY", "SECESSIONIST", "SEMICIRCULAR", "SHARECROPPER", "SIGNIFICANCE", "SINGLEHANDED", "SOUTHERNMOST", "SPECIFICALLY", "SPECTROMETER", "SPORADICALLY", "SKULLDUGGERY", "SOPHISTICATE", "SOUTHWESTERN", "SPECIALISING", "SPIRITUALISM", "SPOKESPERSON", "SOLICITATION", "SPACIOUSNESS", "SPECTROSCOPE", "SPORTSCASTER", "STANDARDIZED", "STEEPLECHASE", "STEPCHILDREN", "STEREOSCOPIC", "STRAIGHTAWAY", "STUPENDOUSLY", "STEPDAUGHTER", "STRAITJACKET", "STRUCTURALLY", "SUCCONSCIOUS", "SUBDIRECTORY", "STENOGRAPHER", "STORYTELLING", "STRATOSPHERE", "SUBCONTINENT", "SUBJECTIVITY", "SUPERCILIOUS", "SURREALISTIC", "SUBSCRIPTION", "SUBTERRANEAN", "SUCCESSIVELY", "SUSPICIOUSLY", "SUPERSTITION", "SUPPLICATION", "SURMOUNTABLE", "SYMBOLICALLY", "SYSTEMICALLY", "TANGENTIALLY", "TESTOSTERONE", "THOROUGHNESS", "TASTEFULNESS", "TESSELLATION", "THEMATICALLY", "THOUGHTFULLY", "THANKSGIVING", "THOROUGHBRED", "THOUSDANFOLD", "TRANQUILIZER", "TRANSMISSION", "TOXICOLOGIST", "TRANQUILLITY", "TRANSCENDANT", "TRANSFERENCE", "TRANSFORMING", "TRANSGRESSOR", "TOGETHERNESS", "TRIUMPHANTLY", "TRIGONOMETRY", "TROUBLEMAKER", "TROUBLESHOOT", "UNACCESSIBLE", "UNAUTHORIZED", "UNATTAINABLE", "UNAUTHORIZED", "UNDERCURRENT", "UNACCEPTABLE", "UNAFFILIATED", "UNBELIEVABLE", "UNDERPOWERED", "UNIDENTIFIED", "UNDERGARMENT", "UNDERSTAFFED", "UNDETECTABLE", "UNEXPECTEDLY", "UNDERSCORING", "UNDETERMINED", "UNOBTAINABLE", "UNQUESTIONED", "UNSUCCESSFUL", "UNMERCIFULLY", "UNOFFICIALLY", "UNPRINCIPLED", "UNRESTRAINED", "UNPLEASANTLY", 'UNREMARKABLE', "UNSCRUPULOUS", "VILIFICATION", "VETERINARIAN", "VOLUNTEERING", "VOCIFEROUSLY", "WHOLEHEARTED", "WASTEFULNESS", "WITHSTANDING", "ACCOUTREMENT", "ADAPTABILITY", "ADDITIONALLY", "ADJUDICATIVE", "ADVISABILITY", "AFORETHOUGHT", "AMORTIZATION", "ANALYTICALLY", "ANTAGONISTIC", "ANTEDILUVIAL", "APPROXIMATOR", "ARCHEOLOGIST", "ARISTOCRATIC", "ASPHYXIATION", "ASTROLIGICAL", "AUTHENTICITY", "AVAILABILITY", "BAHAVIORALLY", "BELLIGERENCE", "BENEFICENTLY", "BIOCHEMISTRY", "BIOMECHANICS", "BLOODSTAINED", "BODYBUILDING", "BREASTSTROKE", "BUSINESSLIKE", "CANDELHOLDER", "CARBOHIDRATE", "CARDIOLOGIST", "CARTOGRAPHER", "CHIROPRACTIC", "CHRISTIANITY", "CIVILISATION", "COHABITATION", "COLORIZATION", "COMMONWEALTH", "COMPENSATION", "CONDEMNATION", "CONSERVATORY", "CONSUMMATION", "CONTEMPORARY", "CONVENIENTLY", "COUNTEROFFER", "DEGENERATIVE", "DELIBERATELY", "DELICATESSEN", "DEMONSTRABLY", "DEPRECIATION", "DIFFERENTIAL", "DISQUALIFIED", "DIVERSIONARY", "EAVESDROPPER", "EFFORTLESSLY", "EMPHATICALLY", "ENCYCLOPEDIA", "ENTOMOLOGIST", "EPISCOPALIAN", "EXASPERATION", "EXTRAVAGANZA", "HALLUCINATED", "HARDSCRABBLE", "HEMATOLOGIST", "HIPPOPOTAMUS", "HORIZONTALLY", "IDENTIFIABLE", "ILLUMINATION", "ILLUSTRATION", "INADMISSIBLE", "INCONVENIENT", "INCORRIGIBLE", "INEXPERIENCE", "INSTRUMENTAL", "INSURRECTION", "INTELLIGENCE", "INTERMEDIARY", "INTERSTELLAR", "INTRODUCTION", "INVULNERABLE", "IRREVERSIBLE", "JURISDICTION", "KNOWLEDGABLE", "LIGHTHEARTED", "MANIPULATIVE", "MANUFACTURER", "MEMORIZATION", "MIRACULOUSLY", "MISPRONOUNCE", "MOTICATIONAL", "MUSICIANSHIP", "MYSTERIOUSLY", "NEUROLOGICAL", "NUMEROLOGIST", "OCCUPATIONAL", "ODONTOLOGIST", "ORGANIZATION", "ORTHODONTIST", "PARTICIPATED", "PARTISANSHIP", "PEDIATRICIAN", "PERCEPTIVELY", "PERIODICALLY", "PERPETUATION", "PERSIPCACITY", "PHILANTHROPY", "PHOTOGRAPHER", "POLARIZATION", "PRESBYTERIAN", "PRESERVATIOIN", "PROFESSORIAT", "PROPORTIONAL", "PROTOTYPICAL", "PRIVIDENTIAL", "PSYCHOMETRIC", "PSYCHOTROPIC", "PUGNACIOUSLY", "QUARTERFINAL", "SEGMENTATION", "SEQUENTIALLY", "SHORTSIGHTED", "SIMULTANEOUS", "STATISTICIAN", "STRADIVARIUS", "SUBJECTIVELY", "SUBSTANTIATE", "SUCCESSFULLY", "SUPERNATURAL", "SURVEILLANCE", "SWASHBUCKLER", "TECHNICALITY", "THOROUGHFARE", "TOTALITARIAN", "TRANSITIONAL", "TRANSPARENCE", "UNACHIEVABLE", "UNAFFORDABLE", "UNDISCOVERED", "VERIFICATION", "VICTORIOUSLY", "YOUTHFULNESS"]
                }                    
 ]

const backgroundImagesPortrait=[
  "https://images.unsplash.com/photo-1553114836-026cecec9778?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mzl8fG5hdHVyZXxlbnwwfDF8MHx8&auto=format&fit=crop&w=500&q=60",
  "https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fgetwallpapers.com%2Fwallpaper%2Ffull%2F7%2F5%2F2%2F1205826-download-hd-wallpaper-for-mobile-1080x1920-phone.jpg&f=1&nofb=1&ipt=0f48b165169fc218b7d8b97e67e9af5252f24c633ea559b983689b6e12ae6368&ipo=images",
  "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.5Eddf-iZqa_MN20nbwtGiwHaNK%26pid%3DApi&f=1&ipt=e9a94fc1d40cd71c607f25e392e4dd43f44b2b4587ff4a20a7536657371aaefd&ipo=images",
  "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.DgWmLmqIFmZq0hIjdsFIngHaNK%26pid%3DApi&f=1&ipt=3abac1e88f83e0a9d81250c5cc0bda9dba4544f0412c75931041b79889040243&ipo=images",
  "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.hCfUGUsPp7K3nz5UDJIN9gHaNL%26pid%3DApi&f=1&ipt=670930a20968989d17c8dcec1feae79e5e0b0728aa47f9dbdd135bce667dfed6&ipo=images"
]

const backgroundImagesLandscape=[
  "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.XGH64ptpzA7Wkx1X92LJYQHaEK%26pid%3DApi&f=1&ipt=208ed7a56cd2e7e58bf1e4d01ef3d008bfcebcfaedc947e710e3d21a030abf44&ipo=images",
  "https://wallpapercave.com/dwp1x/wp3137839.jpg",
  "https://wallpapercave.com/dwp1x/wp3137841.jpg",
  "https://wallpapercave.com/dwp1x/wp2860302.jpg",
  "https://wallpapercave.com/dwp1x/wp3137994.jpg",
  "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP._CSC4ivQBcOBLoOb3My4awHaEK%26pid%3DApi&f=1&ipt=c9ccf97c6abae469cb8c7525d2bde5c40414ecc636d18dce448cfadcaad9c05f&ipo=images"
]



const audios=[ {name: "default",
                link: "./auds/bgmusic.mp3",
                vol: .105
              },
              {name: "Dream",
              link: "./auds/dream.mp3",
              vol: .25
            },
                {name: "Ambition",
                link: "./auds/mixkitdrivingambition.mp3",
                vol: .25
              }
             ]

let helpText = `WORDLENGTH plays like original Wordle with the exception that you can choose the length of your words. Select the Categories icon (2nd from right) and choose words from 5 to 12 letters long. If you choose multiple word lengths, each game will randomly select among the lengths you have chosen. 
<br>
\u00A0\u00A0\u00A0Since each guess on your part must be a valid word, and as the word length grows, it gets tougher and tougher to think of words to enter, here are links to lists that can help -
<br>
\u00A0\u00A0\u00A0 <a href="https://word-lists.com/word-lists/100-most-common-7-letter-words/" target="_blank">7-Letter Words</a>
<br>
\u00A0\u00A0\u00A0 <a href="https://word-lists.com/word-lists/100-most-common-8-letter-words/" target="_blank">8-Letter Words</a>
<br>
\u00A0\u00A0\u00A0 <a href="https://word-lists.com/word-lists/100-most-common-9-letter-words/" target="_blank">9-Letter Words</a>
<br>
\u00A0\u00A0\u00A0 <a href="https://word-lists.com/word-lists/100-most-common-10-letter-words/" target="_blank">10-Letter Words</a>
<br>
\u00A0\u00A0\u00A0 <a href="https://word-lists.com/word-lists/100-most-common-11-letter-words/" target="_blank">11-Letter Words</a>
<br>
\u00A0\u00A0\u00A0 <a href="https://word-lists.com/word-lists/100-most-common-12-letter-words/" target="_blank">12-Letter Words</a>
<br>
\u00A0\u00A0\u00A0
<br>
\u00A0\u00A0\u00A0Additionally, if you are really stuck, click the magnifying glass to show all the possible words for your currently selected length of word.
`

// Check date to be set in portfolio - if not todays date - redirect to home page
let todaysDate =  new Date().toJSON().split("T")[0];
let storedDate = (window.localStorage.getItem('todaysDate'))
/*
if (todaysDate != storedDate){
  window.location.href = "https://steveswebdepot.tech/"
}*/



let viewHelpText = `Welcome to WORDLENGTH! Please read the help(?) for info and tips on game play.`
let sound = "up";
let soundPlayer = "";
let randomAudioIdx = Math.floor(Math.random()*audios.length)
soundPlayer = new Audio (audios[randomAudioIdx].link);
let audioName = audios[randomAudioIdx].name;
soundPlayer.loop = true;
soundPlayer.volume = audios[randomAudioIdx].vol
soundPlayer.currentTime = 1;
const maxLettersNarrowScreen = 21;
let chameleon = false;

DANCE_ANIMATION_DURATION = 1500;
MAX_HISTORY_ITEMS = 500;

let wordFound = true;
let fullScreen = false;
let wordsArray=[]
let keyboardClicks = false;

let playButtonEl = ""
const containerEl = document.getElementById('container')

// in local storage
let currentWordIndex = 0;
let guessedWordCount = 0;
let guessedWords = [[]]
let availableSpace = 1; 
// end local storage


let numofLetters = 5
let numofGuesses = 6
let wordle = ""
let gameInProgress = false;
let atLeastOneGuessMade = false;
let gameActive = true;
let freeSpaces = false;

let randomArray = 0;
let randomWordle = 0;
let revealLetterNum = 0;
const messageContainerEl = document.getElementById('message-container')
const boardContainerEl = document.getElementById('board-container');

/*let categoryPreferences = [
  true, false, false, false, false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false, false, false
];*/

let categoryPreferences = [
];

let resultsArray = []
let resultObj = {
  date: 0,
  wordle: "",
  guesses: 0
}

document.addEventListener("DOMContentLoaded", () => {
    initPreferencesModal();
    initCategories();
    initHelpModal();
    initViewHelpModal();
    initStatsModal();
    initCategoriesModal();
    initCategoriesModalBtn();
   
    initLook();
    initDisplayModal();
    initBoard();
    


  // THIS WORKS IN CASE I WANT TO RANDOMIZE TILE COLORS 
  /*
    let r = document.querySelector(':root');
    let colorNum = Math.floor(Math.random()*120);
    let randomColor = "";
    randomColor =  "hsl(" + colorNum + ", 51%, 47%)"
    r.style.setProperty('--incorrectLetter', randomColor);
    
    colorNum = colorNum + 120;
    randomColor =  "hsl(" + colorNum + ", 51%, 47%)"
    r.style.setProperty('--correctLetter', randomColor);
    colorNum = colorNum + 120;

    randomColor =  "hsl(" + colorNum + ", 51%, 47%)"
    r.style.setProperty('--correctLetterInPlace', randomColor);*/
   
    playButtonEl = document.getElementById("start")
    displayEl = document.getElementById("display")
   

    playButtonEl.addEventListener("click", ({ target }) => {
       letsPlay()
     })

     displayEl.addEventListener("click", ({ target }) => {
       if (gameInProgress){
        if (wordsArray){
    //    messageContainerEl.innerText = "Current category is " + wordsArray[randomArray].cat;
        displayItems();  // not sure where to put this
        }
      }
     })
    });




function letsPlay() {
  messageContainerEl.innerText = ""
  // Clear the classes of the keyboard that were set in any previous Wordle
   initClasses();

   playMusic();

// INIT
// 230223wordsArray=[]

currentWordIndex = 0;
guessedWordCount = 0;
revealLetterNum = 0;
guessedWords = [[]]
availableSpace = 1; 
numofLetters = 5
numofGuesses = 6
wordle = ""
gameInProgress = true;





  setColors();


// END OF INIT
  
//


  messageContainerEl.innerText = ""
  wordsArray = []
  for (i=0; i<protoWordsArray.length; i++){
    if (protoWordsArray[i].sel){
      if (protoWordsArray[i].parent != "parent"){
       wordsArray.push(protoWordsArray[i])
      }
    }
  }
  if (wordsArray.length === 0){
    messageContainerEl.innerText = "Please select at least 1 category";
    return;
  }

  playButtonEl.style.display = "none";
  messageContainerEl.innerText = ""

  // LOOP THRU RANDOMLY SELECTED CATEGORIES UNTIL WE FIND ONE THAT HAS AN ACCEPTABLE ITEM
  let foundCategory = false;
  do {
    randomArray = Math.floor(Math.random()*wordsArray.length);
    if(wordsArray[randomArray].numOfItems > 0){
      foundCategory = true;
    }
  } while (!foundCategory)

/* pinned off on June 17
  const randomArrayWork = window.localStorage.getItem("randomArrayL") || 0;
  if (randomArrayWork){
    randomArray = randomArrayWork;
  }
  */

  
  
  randomWordle = Math.floor(Math.random()*(wordsArray[randomArray].items).length);

  guessedWords = [[]]
  availableSpace = 1; 


 // calcLettersandGuesses();


  loadLocalStorage();

  //createSquares();

  


  

  function initClasses(){
  /*  let keys = document.getElementsByClassName('correct-letter-in-place');
    if (keys){
    keys.forEach(key => {
      key.classList.remove("correct-letter-in-place")  
    });
    }
*/
    const allElements = document.querySelectorAll('*');
    
allElements.forEach((element) => {
  element.classList.remove('correct-letter-in-place');
  element.classList.remove('correct-letter');
  element.classList.remove('incorrect-letter');
});



  }
 
 // createSquares();

//  loadLocalStorage();
  // Check to see if keyboard click event listener has already been set via the first game of the session  
  if (!keyboardClicks){
    addKeyboardClicks();
    document.addEventListener('keydown', function(event) {
      handleKeystroke(event.key)
      });
  }

  /* pinned off on 4/25
  guessedWords = [[]]
  availableSpace = 1; 
  */

  const keys = document.querySelectorAll('.keyboard-row button')


  function getCurrentWordArr() {
    const numberOfGuessedWords = guessedWords.length;
    return guessedWords[numberOfGuessedWords - 1]
  }

  function updateGuessedLetters(letter){
    const currentWordArr = getCurrentWordArr()
    if (currentWordArr && currentWordArr.length < numofLetters){
      currentWordArr.push(letter)
      const availableSpaceEl = document.getElementById(availableSpace)
      availableSpace++;
      availableSpaceEl.textContent = letter;
    }
  }

  function getIndicesOfLetter(letter, arr){
    const indices = [];
    let idx = arr.indexOf(letter);
    while (idx != -1){
      indices.push(idx);
      idx = arr.indexOf(letter, idx+1);
    }
    return indices;
  } // END OF getIndicesOfLetter

  function getTileClass(letter, index, currentWordArr) {
    const isCorrectLetter = wordle
      .toUpperCase()
      .includes(letter.toUpperCase());
      if (!isCorrectLetter){
        return "incorrect-letter";
      }

      const letterInThatPosition = wordle.charAt(index);
      const isCorrectPosition = letter.toLowerCase() === letterInThatPosition.toLowerCase();
      if (isCorrectPosition){
        return "correct-letter-in-place";
      }

  
       const isGuessedMoreThanOnce =
       currentWordArr.filter((l) => l === letter).length > 1;

       if (!isGuessedMoreThanOnce) {
        return "correct-letter";
      }

      const existsMoreThanOnce = wordle.split("").filter((l) => l === letter).length > 1;

    // is guessed more than once and exists more than once
    if (existsMoreThanOnce) {
      return "correct-letter";
    }

    const hasBeenGuessedAlready = currentWordArr.indexOf(letter) < index;

    const indices = getIndicesOfLetter(letter, wordle.split(""));
    const otherIndices = indices.filter((i) => i !== index);
    const isGuessedCorrectlyLater = otherIndices.some(
      (i) => i > index && currentWordArr[i] === letter
    );

    if (!hasBeenGuessedAlready && !isGuessedCorrectlyLater) {
      return "correct-letter";
    }

    return "incorrect-letter";


} // END OF getTileClass


  function handleSubmitWord(){
    const currentWordArr = getCurrentWordArr();
    const guessedWord = currentWordArr.join("");
    let word = guessedWord;
    if (guessedWord.length !== numofLetters){
      messageContainerEl.innerText = (`You entered ${currentWordArr.length} characters which is less than the ${numofLetters} needed`);
      return;
    }
    console.log("guessed word = " + guessedWord)
    if (wordsArray[randomArray].items.includes(guessedWord.toUpperCase())){
      processValidWord();
      return;
    }

    
//  logic to place in handleword
const DICTIONARY_API_BASE_URL =
'https://api.dictionaryapi.dev/api/v2/entries/en/';
  fetch(DICTIONARY_API_BASE_URL + word)
  .then(response => {
    console.log(response)
      if (!response.ok) throw new Error("not valid");
      return response.json();
  })
  .then(word => {
      processValidWord();
  }).catch((err) => {
   // window.alert("word not recognized")
   console.log("error = " + err.message)
    messageContainerEl.innerText = (`You entered ${word} which could not be found`);
  })


function processValidWord(){
  console.log("word = " + word)
  console.log("sound = " + sound)
//  var singleWordDefinition = word[0].meanings[0].definitions[0].definition;
  //    console.log("SINGLE: " + singleWordDefinition);
      const currentWordArr = getCurrentWordArr();
    
     // const guessedWord = currentWordArr.join("");
        // XXXXXXXXXXXXXXXXXXXXXX
        // June 17 bypass when ALL sound is off (set to mute).
        console.log("sound2 = " + sound)
        if (sound === "off" || sound === "up"){
          window.navigator.vibrate(450);
        }
        //flipTile();
        gameActive = true;
        atLeastOneGuessMade = true;
        let checkWordle = wordle;
        const guess = [];
        currentWordArr.forEach(tile => {
          guess.push({letter: tile, color: 'incorrect-letter'});
        } )

        guess.forEach(guess => {
          if (!checkWordle.includes(guess.letter.toUpperCase())){
            guess.color = 'incorrect-letter'
            }
        })
    
    console.log("reached here")
        guess.forEach((guess, index) => {
          if (guess.letter == wordle[index].toLowerCase()){
            guess.color = 'correct-letter-in-place'
            checkWordle = checkWordle.replace(guess.letter.toUpperCase(), '')
          }
        })
    
    
        guess.forEach(guess => {
          if (checkWordle.includes(guess.letter.toUpperCase())){
            if (guess.color === "correct-letter-in-place"){
    
            } else {
            guess.color = 'correct-letter'
            checkWordle = checkWordle.replace(guess.letter.toUpperCase(), '')
          }
          }
        })
    
    
    
    
    
      
        let result = guessedWord.toUpperCase();
    
        const firstLetterId = guessedWordCount * numofLetters + 1;
        let interval = 2500 / numofLetters;
    
        localStorage.setItem("availableSpaceL", availableSpace);
    
    
    
    
    
    
    
    
        currentWordArr.forEach((tile, index) => {
        
          setTimeout(() => {
        //    tile.classList.add("animate__flipInX")
        //    tile.classList.add(guess[index].color)
            const letterId = firstLetterId + index;
            const letterEl = document.getElementById(letterId);
         //   if (letter === " "){
         //     letter = "space"
         //   }
         //  let keyboardLetter = letter.toLowerCase();
         //  const keyboardLetterEl = document.querySelector("[data-key=" + keyboardLetter + "]");
     
            letterEl.classList.add(guess[index].color)
            letterEl.classList.add("animate__flipInX")
        //    addColorToKey(guess[index].letter, guess[index].color)
            if (tile === " "){
              tile = "space"
            }
    
        const keyboardEl = document.querySelector(`[data-key=${tile}]`);
        keyboardEl.classList.add(guess[index].color);
    
            if (index === (numofLetters-1)){
              if (gameActive){
                preserveGameState();
              }
            }
    
          }, interval * index)
      
        })
    
        guessedWordCount += 1;
        window.localStorage.setItem('guessedWordCountL', guessedWordCount);
    
        let date = new  Date();
    //    resultObj.date = date.toString()
        resultObj.date = new Date();
        resultObj.wordle = wordle;
        let guessedWordUpper = guessedWord.toUpperCase();
        if (guessedWordUpper === wordle){
          messageContainerEl.innerText = "Congratulations!"
          gameActive = false;

          if (sound === "off" || sound === "up"){
            const audio = new Audio ("./auds/success.mp3");
            audio.play()
            }
          danceTiles(currentWordArr, firstLetterId);
          resultObj.guesses = guessedWordCount;
          let resultsArrayTemp = JSON.parse(window.localStorage.getItem('resultsL'));
          if (resultsArrayTemp){
              resultsArray = JSON.parse(window.localStorage.getItem('resultsL'));
              resultsArray.push(resultObj);
              window.localStorage.setItem('resultsL', JSON.stringify(resultsArray));
          } else {
            resultsArray[0] = resultObj;
            window.localStorage.setItem('resultsL', JSON.stringify(resultsArray));
          }
    
          setTimeout(function(){
            playButtonEl.innerText = "Play Again?";
            playButtonEl.style.display = "block";
           // messageContainerEl.innerText = ""
        }, 4500);
          const totalWins = window.localStorage.getItem("totalWinsL") || 0;
          window.localStorage.setItem("totalWinsL", Number(totalWins) + 1);
    
          const currentStreak = window.localStorage.getItem("currentStreakL") || 0;
          const maxStreak = window.localStorage.getItem("maxStreakL") || 0;
          let text = "currenStreak = " + currentStreak + " maxStreak = " + maxStreak
       //   window.alert(text)
          window.localStorage.setItem("currentStreakL", Number(currentStreak) + 1);
          if ((Number(currentStreak)+1) > Number(maxStreak)){
       //     window.alert("updating max")
            window.localStorage.setItem("maxStreakL", Number(currentStreak) + 1);
          }
          updateTotalGames();
          resetGameState();
        //  removeKeyboardListeners();
         return;
        } // END OF CORRECT WORD LOGIC
    
        if (guessedWords.length ===  numofGuesses && guessedWord !== wordle) {
          resultObj.guesses = 10;
          let resultsArrayTemp = JSON.parse(window.localStorage.getItem('resultsL'));
          if (resultsArrayTemp){
              resultsArray = JSON.parse(window.localStorage.getItem('resultsL'));
              resultsArray.push(resultObj);
              window.localStorage.setItem('resultsL', JSON.stringify(resultsArray));
          } else {
            resultsArray[0] = resultObj;
            window.localStorage.setItem('resultsL', JSON.stringify(resultsArray));
          }
    
          messageContainerEl.innerText = (`Sorry, no more guesses. The wordle is ${wordle}`)
          gameActive = false;
          window.localStorage.setItem("currentStreakL", 0);
          if (sound === "off" || sound === "up"){
            const audio = new Audio ("./auds/negative.mp3");
            audio.play()
          }
          updateTotalGames();     setTimeout(function(){
         //   messageContainerEl.innerText = ""
            playButtonEl.innerText = "Play Again?";
            playButtonEl.style.display = "block";
        }, 4500);
    
        resetGameState();
    
    
        //  removeKeyboardListeners();
          return;
        } 
    
        if (sound === "off" || sound === "up"){
          console.log("ascending")
          const audio = new Audio ("./auds/ascending.mp3");
          audio.play()
        }

        guessedWords.push([]);



 // I think this is the end of the 'word' code block



}


  } // END OF handleSubmitWord   XXXXXXXXXXXXXXXXXXXXXXXX






  function updateTotalGames(){
    const totalGames = window.localStorage.getItem("totalGamesL") || 0;
    window.localStorage.setItem("totalGamesL", Number(totalGames) + 1);
    gameInProgress = false;
    atLeastOneGuessMade = false;
  }




  function handleDelete(){
    const currentWordArr = getCurrentWordArr()
    if (currentWordArr.length === 0){
      return;
    }
    currentWordArr.pop();

    guessedWords[guessedWords.length - 1] = currentWordArr

    const lastLetterEl = document.getElementById(availableSpace - 1)

    lastLetterEl.innerHTML = ""   
    availableSpace--; 

  } // END OF handleDelete


  function removeKeyboardListeners(){
    const keys = document.querySelectorAll(".keyboard-row button");
    for (let i = 0; i < keys.length; i++) {
      keys[i].removeEventListener("click")
    }
   }

  function addKeyboardClicks(){    
      keyboardClicks = true;
      const keys = document.querySelectorAll(".keyboard-row button");
      for (let i = 0; i < keys.length; i++) {
        keys[i].addEventListener("click", ({ target }) => {
          if (!gameInProgress){
            return;
          }
      
          messageContainerEl.innerText = ""

          let key = target.getAttribute("data-key");
          target.blur() 
  
 
          if (key === "enter") {
            const audio = new Audio ("./auds/hard-keypress.wav");
            audio.play()
            handleSubmitWord();
            return;
          }
  
          if (key === "del") {
            const audio = new Audio ("./auds/hard-keypress.wav");
            audio.play()
            handleDelete();
            return;
          }

          if (key === "space") {
            const audio = new Audio ("./auds/keypress2.wav");
            audio.play()
            key = " "
          }
          const audio = new Audio ("./auds/keypress2.wav");
          audio.play()
          updateGuessedLetters(key);
        });
      }  // END OF FOR KEYBOARD LOOP

      const titleEl = document.querySelector(".title")
      titleEl.addEventListener("click", ({ target }) => {
      if (!atLeastOneGuessMade){
         return;
        }
        populateRow();
      });
    


        // holdSpaceDel();
        initMisc();




    } // END OF Ians addKeyboardClicks 

function populateRow(){
  const allSquaresEl = document.querySelectorAll(".square")
  const currentWordArr = getCurrentWordArr()
  guessedWords[guessedWords.length - 1] = [];
  availableSpace = guessedWordCount * numofLetters + 1;


  for (i=0; i<numofLetters; i++){
 //   for (i=0; i<4; i++){
    // check for equal modulus values that would indicate the same column, if find correct letter in correct space class output it
    // get id then check class
   // element.classList.contains(class);
 //   updateGuessedLetters('x');
    // loop thru checking all columns except for the last
    let foundGreen = false;
    for (j=0; j<numofGuesses; j++){
      let idNum = (i)+(j*numofLetters)
      if (allSquaresEl[idNum].classList.contains("correct-letter-in-place")){
           foundGreen = (allSquaresEl[idNum].innerText.toLowerCase())
      } 
      } // end of for j
    if (foundGreen){
      updateGuessedLetters(foundGreen)
    } else {
      updateGuessedLetters(' ')
    }
  }
} //END OF POPULATE ROW


function initMisc(){

}




    function holdSpaceDel(){
          // The item (or items) to press and hold on
    let itemSpace = document.querySelector(".space-button");
    let itemDel = document.querySelector(".del-button");

    let timerID;
    let counter = 0;

    let spaceHoldEvent = new CustomEvent("spaceHold");
    let delHoldEvent = new CustomEvent("delHold");  

    // Increase or decreae value to adjust how long
    // one should keep pressing down before the pressHold
    // event fires
    let pressHoldDuration = 50;

    // Listening for the mouse and touch events    
    itemSpace.addEventListener("mousedown", pressingDown, false);
    itemSpace.addEventListener("mouseup", notPressingDown, false);
    itemSpace.addEventListener("mouseleave", notPressingDown, false);

    itemSpace.addEventListener("touchstart", pressingDown, false);
    itemSpace.addEventListener("touchend", notPressingDown, false);
    // Listening for our custom pressHold event
    itemSpace.addEventListener("spaceHold", spaces, false);

        // Listening for the mouse and touch events on Delete    
        itemDel.addEventListener("mousedown", pressingDown2, false);
        itemDel.addEventListener("mouseup", notPressingDown2, false);
        itemDel.addEventListener("mouseleave", notPressingDown2, false);
    
        itemDel.addEventListener("touchstart", pressingDown2, false);
        itemDel.addEventListener("touchend", notPressingDown2, false);
        // Listening for our custom pressHold event
    //    itemDel.addEventListener("delHold", deletes, false);

    function pressingDown(e) {
      // Start the timer
      requestAnimationFrame(timer);
      e.preventDefault();
    }

    function notPressingDown(e) {
      // Stop the timer
      cancelAnimationFrame(timerID);
      counter = 0;
    }

    //
    // Runs at 60fps when you are pressing down
    //
    function timer() {
      if (counter < pressHoldDuration) {
        timerID = requestAnimationFrame(timer);
        counter++;
      } else {
         itemSpace.dispatchEvent(spaceHoldEvent);
      }
    }




    function pressingDown2(e) {
      // Start the timer
      requestAnimationFrame(timer2);
      e.preventDefault();
    }

    function notPressingDown2(e) {
      // Stop the timer
      cancelAnimationFrame(timerID);
      counter = 0;
    }

    //
    // Runs at 60fps when you are pressing down
    //
    function timer2() {

      if (counter < pressHoldDuration) {
        timerID = requestAnimationFrame(timer2);
        counter++;
      } else {
        itemDel.dispatchEvent(delHoldEvent);
      }
    }

    function spaces(e) {

     }



    }


  function handleKeystroke(letter){
    if (!gameInProgress){
      return;
    }
    messageContainerEl.innerText = "";
    let containerEl = document.getElementById('container')
  //  containerEl.requestFullscreen();

  if (letter === "Enter" || letter === "Delete"){
  } else {
      let alpha = "abcdefghijklmnopqurstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ";
      let result = alpha.includes(letter);
      if (!result){
        return;
      }
    }
    if (letter === "Enter" ){
      handleSubmitWord();
      return;
    }

    if (letter === "Delete" ){
      handleDelete();
      return;
    }

    letter = letter.toLowerCase();
    updateGuessedLetters(letter);

  }

}

// THIS LOGIC IS TAKEN FROM ANIA KUBOWS WORDLE CLONE - ITS COLOR LOGIC WORKS CORRECTLY 
const flipTile = () => {
  // pick up at 
  const rowTiles = document.querySelector('#guessRow-' + currentRow).childNodes;

  let checkWordle = wordle;
  const guess = [];

  rowTiles.forEach(tile => {
    guess.push({letter: tile.getAttribute('data'), color: 'grey-overlay'})
  })

  guess.forEach((guess, index) => {
    if (guess.letter == wordle[index]){
      guess.color = 'green-overlay'
      checkWordle = checkWordle.replace(guess.letter, '')
    }
  })

  guess.forEach(guess => {
    if (checkWordle.includes(guess.letter)){
      guess.color = 'yellow-overlay'
      checkWordle = checkWordle.replace(guess.letter, '')
    }
  })

  rowTiles.forEach((tile, index) => {
    
    setTimeout(() => {
      tile.classList.add('flip')
      tile.classList.add(guess[index].color)
      addColorToKey(guess[index].letter, guess[index].color)
    }, 500 * index)

  })
}


function initHelpModal() {
  const modal = document.getElementById("help-modal");
 // modal.textContent = "Explanation of this version of WORDLE"
  // Get the button that opens the modal
  const btn = document.getElementById("help");

  // Get the <span> element that closes the modal
  const span = document.getElementById("close-help");


  // When the user clicks on the button, open the modal
  btn.addEventListener("click", function () {
    modal.style.display = "block";
    helpEl = document.querySelector(".modal-body")
    helpEl.innerHTML = helpText
    if (sound === "off" || sound === "up"){
      const audio = new Audio ("./auds/stats.mp3");
      audio.play() 
      }
    window.localStorage.setItem('viewedhelpL', "viewed");
 //   helpEl.requestFullscreen();
  });

  // When the user clicks on <span> (x), close the modal
  span.addEventListener("click", function () {
    modal.style.display = "none";
  });

  // When the user clicks anywhere outside of the modal, close it
  window.addEventListener("click", function (event) {
    if (event.target == modal) {
      modal.style.display = "none";
    }
  });
}



function initViewHelpModal() {
  const modal = document.getElementById("view-help-modal");
  const span = document.getElementById("close-view-help");

  if (!window.localStorage.getItem("viewedhelpL")){
    modal.style.display = "block";
    helpEl = document.getElementById("view-help")
    helpEl.innerHTML = viewHelpText
  }
 
  // When the user clicks on <span> (x), close the modal
  span.addEventListener("click", function () {
  modal.classList.toggle("fade-out")
  setTimeout(function(){
    modal.style.display = "none";
    modal.classList.toggle("fade-out")
   }, 2500);

  });


}


function updateStatsModal(){
  const currentStreak = window.localStorage.getItem("currentStreakL");
  const maxStreak = window.localStorage.getItem("maxStreakL");
  const totalWins = window.localStorage.getItem("totalWinsL");
  const totalGames = window.localStorage.getItem("totalGamesL");
  if (sound === "off" || sound === "up"){
    const audio = new Audio ("./auds/stats.mp3");
    audio.play()
    }
  document.getElementById('total-played').textContent = totalGames;
  document.getElementById('total-wins').textContent = totalWins;
  document.getElementById('current-streak').textContent = currentStreak;
  document.getElementById('max-streak').textContent = maxStreak;

  const winPct = Math.round((totalWins / totalGames) * 100) || 0
  document.getElementById('win-pct').textContent = winPct;

}

function initStatsModal() {
  const modal = document.getElementById("stats-modal");
  // Get the button that opens the stats modal
  const btn = document.getElementById("stats");

  // Get the <span> element that closes the modal
  const span = document.getElementById("close-stats");
  const delEl = document.getElementById("delete-stats");
  const delBodyEl = document.getElementById("delete-body");
  const delModal = document.getElementById("delete-modal");
  const closeDel = document.getElementById("close-delete");
  const yesEl = document.getElementById("yes");
  const noEl = document.getElementById("no");

  // Get the element that shows results
  const resultsEl = document.querySelector(".results")
  const resultsButton = document.getElementById("stats-info");


  // When the user clicks on the button, open the modal
  btn.addEventListener("click", function () {
    updateStatsModal();
    modal.style.display = "block";
    helpEl = document.getElementById("stats-modal")
 //   helpEl.requestFullscreen();
  });

  // When the user clicks on <span> (x), close the modal
  span.addEventListener("click", function () {
    modal.style.display = "none";
    resultsEl.style.display = "none";
  });


    // When the user clicks on delete stats <span> (x), display confirmation box
    delEl.addEventListener("click", function () {
      delModal.style.display = "block";
    });


      // When the user clicks on <span> (x), close the delete modal
    closeDel.addEventListener("click", function () {
      delModal.style.display = "none";
    });

      // When the user clicks on Yes, clear history via localstorage clear the results tray and close delete modal
      yesEl.addEventListener("click", function () {
        localStorage.removeItem("resultsL")
        localStorage.removeItem("currentStreakL")
        localStorage.removeItem("maxStreakL")
        localStorage.removeItem("totalWinsL")
        localStorage.removeItem("totalGamesL")
        const resultsTrayEl = document.getElementById("results-tray");
        resultsTrayEl.innerHTML = ""
        delModal.style.display = "none";
        resultsArray = [];
      });

      // When the user clicks on No, close delete modal
      noEl.addEventListener("click", function () {
        delModal.style.display = "none";
        // June 16
        resetGameState();
        //
      });
      

  

    // When the user clicks on stats info (i) show results
    resultsButton.addEventListener("click", function () {
      resultsEl.style.display = "block";
      buildResults();
    });

  // When the user clicks anywhere outside of the modal, close it
  window.addEventListener("click", function (event) {
    if (event.target == modal) {
      modal.style.display = "none";
      resultsEl.style.display = "none";
    }
  });
}

function buildResults(){
  const resultsTrayEl = document.getElementById("results-tray")


/* 
// TEMP CODE TO FIND 4 WORD MOVIE THAT STARTS WITH 'TH'
for (i=0; i<protoWordsArray[4].numOfItems; i++){
  const myArray = protoWordsArray[4].items[i].split(" ");
  if (myArray.length != 4){
    
  } else {

  if (myArray[0].substring(0,2) === "TH"){

  let resultItemEl = document.createElement('div')
  resultsTrayEl.appendChild(resultItemEl)
  resultItemEl.innerText = protoWordsArray[4].items[i]
  }
}
return;
*/

  // LOOP THRU RESULTS IN REVERSE ORDER

  let resultItemEl = document.createElement('div')
//      resultItemEl.innerText = "here are where results will go"
//  resultsTrayEl.appendChild(resultItemEl)

  let resultsArrayTemp = JSON.parse(window.localStorage.getItem('resultsL'));
  if (resultsArrayTemp){
      if (resultsArrayTemp.length > MAX_HISTORY_ITEMS){
        let numToDelete = resultsArrayTemp.length - MAX_HISTORY_ITEMS;
        resultsArrayTemp.splice(0, numToDelete)
        window.localStorage.setItem('resultsL', JSON.stringify(resultsArrayTemp));
      }

      resultsArray = JSON.parse(window.localStorage.getItem('resultsL'));
      date = new Date(resultsArray[resultsArray.length-1].date);
      const year = date.getFullYear();
      const hours = date.getHours();
      resultsTrayEl.innerHTML = ""
      let resultItemEl = document.createElement('div')
      resultItemEl.innerText = "Date"
      resultItemEl.style.fontWeight = "bold"
      resultsTrayEl.appendChild(resultItemEl)
      resultItemEl = document.createElement('div')
      resultItemEl.innerText = "Wordle"
      resultItemEl.style.fontWeight = "bold"
      resultsTrayEl.appendChild(resultItemEl)
      resultItemEl = document.createElement('div')
      resultItemEl.innerText = "#"
      resultItemEl.style.fontWeight = "bold"
      resultsTrayEl.appendChild(resultItemEl)

      for (i=resultsArray.length - 1; i>-1; i--){
        let resultItemEl = document.createElement('div')
        let date = new Date(resultsArray[i].date);
        let year = date.getFullYear();
        let yy = year.toString().slice(2);
        let month = date.getMonth() + 1;
        let day = date.getDate();
        resultItemEl.innerText = month + "/" + day + "/" + yy
        if (resultsArray[i].guesses === 10){
          resultItemEl.style.color = "red";  
        }
        let screenWidth = window.innerWidth;
        resultsTrayEl.appendChild(resultItemEl)
        resultItemEl = document.createElement('div')
        resultItemEl.innerText = resultsArray[i].wordle
        if (resultsArray[i].wordle.length > maxLettersNarrowScreen){
          if (screenWidth < 400){
             resultItemEl.innerText = resultsArray[i].wordle.slice(0, maxLettersNarrowScreen - 1) + ".."
          }
        }
        if (resultsArray[i].guesses === 10){
          resultItemEl.style.color = "red";  
        }
        resultsTrayEl.appendChild(resultItemEl)
        resultItemEl = document.createElement('div')
        resultItemEl.innerText = resultsArray[i].guesses
        if (resultsArray[i].guesses === 10){
          resultItemEl.innerText = "-"  
          resultItemEl.style.color = "red";
        }
        resultsTrayEl.appendChild(resultItemEl)
      }
      // write out buffer for padding
      resultItemEl = document.createElement('div')
      resultItemEl.innerText = "a"
      resultItemEl.style.color = "transparent"
      resultsTrayEl.appendChild(resultItemEl)
      resultItemEl = document.createElement('div')
      resultItemEl.innerText = "a"
      resultItemEl.style.color = "transparent"
      resultsTrayEl.appendChild(resultItemEl)
      resultItemEl = document.createElement('div')
      resultItemEl.innerText = "a"
      resultItemEl.style.color = "transparent"
      resultsTrayEl.appendChild(resultItemEl)

  }

}

function updateCategoriesModal(){

let categories = document.querySelectorAll(".category")
for (i=0; i<categories.length; i++){
  if (protoWordsArray[i].sel){
    categories[i].style.color = "black";
    categories[i].style.fontWeight = "bold";

  } else {
     categories[i].style.color = "grey";
     categories[i].style.fontWeight = "normal";

  }
  if (protoWordsArray[i].parent==="parent"){
    categories[i].style.color = "green";
    categories[i].style.fontWeight = "normal";
    calcTotalParentItems(protoWordsArray[i].cat, i)
  }
 }
}

function calcTotalParentItems(parentCat, i){
  let childClass = (".child" + parentCat)
  const childEls = document.querySelectorAll(childClass)
  let total = 0; 
  for (j=0; j<childEls.length; j++){
    if(protoWordsArray[i+j+1].sel){
  //    total = total + protoWordsArray[i+j+1].items.length;
      total = total + protoWordsArray[i+j+1].numOfItems;
    }
  }
  const category = document.querySelector("."+parentCat)
  category.innerText = `${protoWordsArray[i].cat} ${total}...`;
  if(total>0){
    category.innerText = `${protoWordsArray[i].cat} ${total}...`;
    category.style.fontWeight = "bold";
  } else {
    category.innerText = `${protoWordsArray[i].cat}...`;
    category.style.fontWeight = "normal";
  }
}

function initCategoriesModal() {
  // Look for category preferences in localstorage
  // if found apply those values to the protoarray
  let categoryPreferencesTemp = JSON.parse(window.localStorage.getItem('categoryPreferencesL'));

  if (categoryPreferencesTemp) {
    categoryPreferences = JSON.parse(window.localStorage.getItem('categoryPreferencesL'))
    for (i=0; i<protoWordsArray.length; i++){
      protoWordsArray[i].sel = categoryPreferences[i]
      if (protoWordsArray[i].parent === "parent"){
        protoWordsArray[i].sel = false; 
      }
    }
    
}
  const modal = document.getElementById("categories-modal");
  // Get the button that opens the categories modal
  const btn = document.getElementById("categories");

  // Get the <span> element that closes the modal
  const span = document.getElementById("close-categories");


  let categoriesContainerEl = document.getElementById("categories-body")
  categoriesContainerEl.innerHTML = ""

  for (i=0; i<protoWordsArray.length; i++){
    let category = document.createElement("div");
  //  category.innerText = `${protoWordsArray[i].cat} ${protoWordsArray[i].items.length}`;
    category.innerText = `${protoWordsArray[i].cat} ${protoWordsArray[i].numOfItems}`;
    if (protoWordsArray[i].parent === "parent"){
      category.innerText = protoWordsArray[i].cat + "...";
    }

    category.classList.add("category")
    // Add class of parent or child
    if (protoWordsArray[i].parent === "parent"){
      category.classList.add("parent")
      category.classList.add(protoWordsArray[i].cat)
    }
    
    category.id = i;
    categoriesContainerEl.appendChild(category);
    category.addEventListener("click", ({ target }) => {
       // window.alert(category.innerText + category.id)
        protoWordsArray[category.id].sel = !(protoWordsArray[category.id].sel)
        if (protoWordsArray[category.id].sel){
          if (sound === "off" || sound === "up"){
            const audio = new Audio ("./auds/shortgood.mp3");
            audio.play()
            }
        } 
        else {
          if (sound === "off" || sound === "up"){
            const audio = new Audio ("./auds/pop39222.mp3");
            audio.play()  
            }      
        }
        if (protoWordsArray[category.id].parent==="parent"){
          let children = document.querySelectorAll(".child"+protoWordsArray[category.id].cat)
          if (protoWordsArray[category.id].sel){
            for (l=0; l<children.length; l++){
              children[l].style.display = "block"
            }
          } else {
            for (l=0; l<children.length; l++){
              children[l].style.display = "none"
            }
          } 
        }

        updateCategoriesModal()
      });
  }

  // When the user clicks on <span> (x), close the modal
  span.addEventListener("click", function () {
    modal.style.display = "none";
    preserveCategories();

  });

  // When the user clicks anywhere outside of the modal, close it
  window.addEventListener("click", function (event) {
    if (event.target == modal) {
      modal.style.display = "none";
    }
  });
}

function initCategoriesModalBtn(){
    // When the user clicks on the button, open the modal
    const modal = document.getElementById("categories-modal");
    const btn = document.getElementById("categories");
    btn.addEventListener("click", function () {
      updateCategoriesModal();
      if (sound === "off" || sound === "up"){
        const audio = new Audio ("./auds/stats.mp3");
        audio.play()
        }
      modal.style.display = "block";
      helpEl = document.getElementById("categories-modal")
     });
  
}

function preserveCategories(){
    for (i=0; i<protoWordsArray.length; i++){
      categoryPreferences[i] = protoWordsArray[i].sel
    }
    window.localStorage.setItem('categoryPreferencesL', JSON.stringify(categoryPreferences));
}





function revealLetter(){

  const numberOfGuessedWords = guessedWords.length;
  currentWordArr = guessedWords[numberOfGuessedWords - 1]
  let letter = wordle[revealLetterNum]
    currentWordArr[revealLetterNum] = letter;
    const availableSpaceEl = document.getElementById(revealLetterNum+1)
    availableSpaceEl.textContent = letter;
    revealLetterNum++

}

function initLook(){
      // Select background image based on portrait or landscape mode but first check for default
      const body = document.getElementsByTagName('body')[0];
      let backgroundImage  = JSON.parse(window.localStorage.getItem('backgroundL'));
      if (backgroundImage === "Random" || !backgroundImage){
        if (window.innerHeight > window.innerWidth){
          let randomImg = Math.floor(Math.random()*backgroundImagesPortrait.length)
            body.style.backgroundImage = "url(" + backgroundImagesPortrait[randomImg] + ")";
        } else {  
          let randomImg = Math.floor(Math.random()*backgroundImagesLandscape.length)
          body.style.backgroundImage = "url(" + backgroundImagesLandscape[randomImg] + ")";
      }
    } else {
      body.style.backgroundImage = "url(" + backgroundImage + ")";
    }


      initAudio()
    }



function initAudio(){
let icon = document.querySelector(".fa-volume-up");

icon.onclick = function (){
  if(icon.classList.contains("fa-volume-up")){
      icon.classList.replace("fa-volume-up", "fa-volume-off");
      sound = "off"
  }
  else if(icon.classList.contains("fa-volume-off")){
      icon.classList.replace("fa-volume-off", "fa-volume-mute");
      icon.classList.replace("fa", "fas");
      sound = "mute"
  }
  else {
    icon.classList.replace("fa-volume-mute", "fa-volume-up");
    icon.classList.replace("fas", "fa");
    sound = "up"
  }
music();
}
}


function music(){
  // June 11, 2023 make it a 3 way toggle  up-off-mute

  if (sound==="off" || sound==="mute"){
    if (soundPlayer){
      soundPlayer.pause();
    }
  }

  if (sound==="up"){
    if (soundPlayer){
      soundPlayer.play();
    }
  }
}


function playMusic(){
  if (sound==="up"){
  soundPlayer.play();
  }
}


function initPreferencesModal() {


  const modal = document.getElementById("preferences-modal");
  // Get the button that opens the preferences modal
  const btn = document.getElementById("preferences");
  const rndLandscapeEl = document.getElementById("random-bg-container");
  const rndPortraitEl = document.getElementById("portrait-random-bg-container");
 
  // Get the <span> element that closes the modal 
  const span = document.getElementById("close-preferences");


  const preferencesContainerEl = document.getElementById("preferences-body")
  const portraitPreferencesContainerEl = document.getElementById("portrait-preferences-body")

  const textAreaEl = document.querySelector("textarea");
 // preferencesContainerEl.style.display="none"
  portraitPreferencesContainerEl.style.display="none"


  let randomImagesEl = document.querySelectorAll('#random-bg-container img');
for (i=0; i<6; i++){
  randomImagesEl[i].src = backgroundImagesLandscape[i];
}


let oneImagesEl = document.querySelectorAll('#one-bg-container img');
for (i=0; i<6; i++){
  oneImagesEl[i].src = backgroundImagesLandscape[i];
}


  // When the user clicks on the button, open the modal
  btn.addEventListener("click", function () {
    if (sound === "off" || sound === "up"){
      const audio = new Audio ("./auds/stats.mp3");
      audio.play()
      }
    modal.style.display = "block";
    helpEl = document.getElementById("preferences-modal")
  });

  // When the user clicks on <span> (x), close the modal
  span.addEventListener("click", function () {
    modal.style.display = "none";
    initCategories();
    initCategoriesModal();
  });

  // When the user clicks anywhere outside of the modal, close it
  window.addEventListener("click", function (event) {
    if (event.target == modal) {
      modal.style.display = "none";
    }
  });

 

  textAreaEl.addEventListener("selectionchange", function (event) {
        const body = document.getElementsByTagName('body')[0];
        body.style.backgroundImage = "url(" + textAreaEl.value + ")"
        window.localStorage.setItem('backgroundL', JSON.stringify(textAreaEl.value));
      }
    );


    // When the user clicks on the random landscpape - randomly change the background
    rndLandscapeEl.addEventListener("click", function (event) {
      let randomImg = Math.floor(Math.random()*backgroundImagesLandscape.length)
      const body = document.getElementsByTagName('body')[0];
      body.style.backgroundImage = "url(" + backgroundImagesLandscape[randomImg] + ")"
      window.localStorage.setItem('backgroundL', JSON.stringify("Random"));
    });

        // When the user clicks on the random portrait - randomly change the background
        rndPortraitEl.addEventListener("click", function (event) {
          let randomImg = Math.floor(Math.random()*backgroundImagesLandscape.length)
          const body = document.getElementsByTagName('body')[0];
          body.style.backgroundImage = "url(" + backgroundImagesLandscape[randomImg] + ")"
          window.localStorage.setItem('backgroundL', JSON.stringify("Random"));
        });
    


    const bgs = document.querySelectorAll(".maxi-img");
    for (let i = 0; i < bgs.length; i++) {
      bgs[i].addEventListener("click", ({ target }) => {

        let bg = target.getAttribute("src");
        const body = document.getElementsByTagName('body')[0];
        body.style.backgroundImage = "url(" + bg + ")"
        window.localStorage.setItem('backgroundL', JSON.stringify(bg));

      });
      }


      initBgAudios();
      initChameleon();
 
    }




    
function initBgAudios() {

  const audioContainerEl = document.getElementById("audios-body")
  let bgAudio = document.createElement("div");
 // bgAudio.innerText = "Random"
//  bgAudio.style.color = "gray";
//  audioContainerEl.appendChild(bgAudio);
  for (i=0; i<audios.length; i++){
    let bgAudio = document.createElement("div");
    bgAudio.innerText = audios[i].name;
    
    bgAudio.id = i;
    bgAudio.style.color = "gray";
    bgAudio.classList.add("audio")
    audioContainerEl.appendChild(bgAudio);  


    bgAudio.addEventListener("click", ({ target }) => {
      const toggleAudios = document.querySelectorAll(".audio");
      for (i=0; i<audios.length; i++){
        toggleAudios[i].style.color = "gray"
        toggleAudios[i].style.fontWeight = "normal"
      }
      soundPlayer.setAttribute('src',audios[target.id].link); //change the source
      bgAudio.style.color = 'black';
      bgAudio.style.fontWeight = 'bold';
      let audioName = audios[target.id].name
      soundPlayer.volume = audios[target.id].vol
      playMusic()
          });
  }
}


function initChameleon() {

  const chameleonEl = document.getElementById("chameleon")

    chameleonEl.addEventListener("click", ({ target }) => {
        chameleon = !chameleon;
        if (chameleon){
          chameleonEl.style.color = 'black';
          chameleonEl.style.fontWeight = 'bold';
          if (sound === "off" || sound === "up"){
            const audio = new Audio ("./auds/shortgood.mp3");
            audio.play()
            }
        } else {
          chameleonEl.style.color = 'gray'; 
          chameleonEl.style.fontWeight = 'normal';
          if (sound === "off" || sound === "up"){
            const audio = new Audio ("./auds/pop39222.mp3");
            audio.play()
        }
      }
          });
  }


  // DANCE TILES FROM WEBDEV SIMPLIFIED
function danceTiles(tiles, firstLetterId){

  tiles.forEach((tile, index) => {
    setTimeout(() => {
    const letterId = firstLetterId + index;
    const letterEl = document.getElementById(letterId);
    letterEl.classList.add("dance")
    letterEl.addEventListener(
      "animationend",
      () => {
        letterEl.classList.remove("dance")
      },
      {once: true}
      )
    }, index * DANCE_ANIMATION_DURATION / tiles.length)
  })
}

function setColors(){
  
  let r = document.querySelector(':root');
  if (chameleon){
      let colorNum1 = Math.floor(Math.random()*280);
      let colorNum2 = Math.floor(Math.random()*299);
      // Make sure color hues are sufficiently different
      if (colorNum2 > colorNum1){
        if ((colorNum2-colorNum1) < 60){
          colorNum2 = colorNum2 + 60;
        }
      } else {
        if ((colorNum1-colorNum2) < 60){
          colorNum1 = colorNum1 + 60;
        }
      }
      let randomColor = "";
  
      randomColor =  "hsl(" + colorNum1 + ", 60%, 55%)"
      r.style.setProperty('--correctLetter', randomColor);
  
      randomColor =  "hsl(" + colorNum2 + ", 60%, 35%)"
      r.style.setProperty('--correctLetterInPlace', randomColor);
      r.style.setProperty('--freeSpace', randomColor);
    } else { // Set default Wordle colors 
      r.style.setProperty('--correctLetter', 'rgb(181, 159, 59)');
      r.style.setProperty('--correctLetterInPlace', 'rgb(83, 141, 78)');
      r.style.setProperty('--freeSpace', 'rgb(83, 141, 78)');
    }
}

function initCategories(){
  // LOOP THRU EACH CATEGORY
  for(i=0; i<protoWordsArray.length; i++){
    let workcount = 0;
    for(j=0; j<protoWordsArray[i].items.length; j++){
        workcount++;
    }
    protoWordsArray[i].numOfItems = workcount;
  } 
}

function preserveGameState(){
  window.localStorage.setItem('guessedWordsL', JSON.stringify(guessedWords));
  const keyboardContainer = document.getElementById('keyboard-container');
  window.localStorage.setItem("keyboardContainerL", keyboardContainer.innerHTML);
  const boardContainer = document.getElementById('board-container');
  window.localStorage.setItem("boardContainerL", boardContainer.innerHTML);
  const board = document.getElementById('board');
  window.localStorage.setItem("boardL", board.innerHTML);
  window.localStorage.setItem('randomArrayL', Number(randomArray));
  
}

function loadLocalStorage(){
  let kContainer = window.localStorage.getItem("keyboardContainerL");
  wordle =window.localStorage.getItem("wordleL");
  if (kContainer){
    calcLettersandGuesses();
    messageContainerEl.innerText = "Last Wordlength game was interrupted - continue at point it was lost";
    // add on june 17 2023 code to hide the display categories button
  //  randCatEl = document.getElementById("randcat")
  //  randCatEl.style.display = "none"
    //
    atLeastOneGuessMade = true;
    setTimeout(function(){
  }, 4500);
  } else {
    wordle = wordsArray[randomArray].items[randomWordle];
    window.localStorage.setItem("wordleL", wordle);
    calcLettersandGuesses();
    createSquares();
  }

  guessedWordCount = Number(window.localStorage.getItem('guessedWordCountL')) || guessedWordCount
  availableSpace = Number(window.localStorage.getItem('availableSpaceL')) || availableSpace
  guessedWords = JSON.parse(window.localStorage.getItem('guessedWordsL')) || guessedWords
  

  const storedBoardContainer = window.localStorage.getItem("boardContainerL");
  if (storedBoardContainer){
    document.getElementById("board-container").innerHTML = storedBoardContainer;
  }

  const storedBoard = window.localStorage.getItem("boardL");
  if (storedBoard){
    document.getElementById("board").innerHTML = storedBoard;
  }

  const storedKeyboardContainer = window.localStorage.getItem("keyboardContainerL");
  if (storedKeyboardContainer){
    document.getElementById("keyboard-container").innerHTML = storedKeyboardContainer;
  }




}

function resetGameState(){
  localStorage.removeItem('wordleL')
  localStorage.removeItem('guessedWordCountL')
  localStorage.removeItem('keyboardContainerL')
  localStorage.removeItem('boardContainerL')
  localStorage.removeItem('boardL')
  localStorage.removeItem('availableSpaceL')
  localStorage.removeItem('guessedWordsL')
  localStorage.removeItem('randomArrayL')
}

function calcLettersandGuesses(){

  numofLetters = wordle.length;
  if(window.innerWidth < 900){
    if (numofLetters > maxLettersNarrowScreen){
      messageContainerEl.innerText = "Mobile Screen - " + numofLetters + " character Wordle has been truncated to " + maxLettersNarrowScreen;
      setTimeout(function(){
   //     messageContainerEl.innerText = ""
    }, 4500);
      numofLetters = maxLettersNarrowScreen;
      wordle = wordle.slice(0, maxLettersNarrowScreen);
    }
  }
  numofGuesses = 6;
  if (numofLetters > 6){
    numofGuesses = 7;
  }
  if (numofLetters > 7){
    numofGuesses = 8;
  }


}



  function createSquares(){
    let screenWidth = window.innerWidth;
    if (screenWidth > 900){
      screenWidth = 900;
    }
    let screenHeight = window.innerHeight;

    const gameBoard = document.getElementById("board")


    // Clear out any elements of class "square"
    let squares = document.getElementsByClassName('square');
    while (squares[0]){
      squares[0].parentNode.removeChild(squares[0]);
    }

    for (let i = 0; i < (numofLetters*numofGuesses); i++) {
      let square = document.createElement("div");
      square.classList.add("square");
      square.classList.add("animate__animated");
      square.setAttribute("id", i + 1);
      gameBoard.appendChild(square)
    }  

    //  FROM HERE TO END OF FUNCTION ADDED BECAUSE NUMBER OF LETTERS IN WORDLE CAN VARY
    const board = document.getElementById("board")
    const square = document.querySelectorAll(".square")
    square.forEach(square => {
      square.style.width = (screenWidth / (numofLetters + 4) + 'px');
      square.style.height = ((screenHeight / 15) + 'px');
      square.style.height = (screenWidth / (numofLetters + 4) + 'px');
      square.style.fontSize = (screenWidth / (numofLetters + 4) + 'px');
      if (screenWidth > screenHeight){
        square.style.height = ((screenHeight / 15) + 'px');
        square.style.fontSize = ((screenHeight / 20) + 'px');

      }
    });
    board.style.gridTemplateColumns = 'repeat(' + numofLetters + ', 1fr)'
  
  } // END OF createSquares 

  function showSpacesForFree(){

    let checkWordle = wordle;
    const guess = [];
  
    // set guess equal to an array of numofletters spaces
    for (i=0; i<numofLetters; i++){
      guess.push({letter: ' ', color: 'incorrect-letter'});
    }

    guess.forEach((guess, index) => {
      if (guess.letter == wordle[index].toLowerCase()){
        guess.color = 'free-space'
      }
    })


    const firstLetterId = guessedWordCount * numofLetters + 1;

    guess.forEach((tile, index) => {
    
   
        const letterId = firstLetterId + index;
        const letterEl = document.getElementById(letterId);
        letterEl.classList.add(guess[index].color)
    //    addColorToKey(guess[index].letter, guess[index].color)
        if (tile === " "){
          tile = "space"
        }

    })

  }

  screen.orientation.lock("natural");
  screen.addEventListener("orientationchange", () => {
  //  console.log(`The orientation of the screen is: ${screen.orientation}`);
  });


  

  function initDisplayModal() {
    const modal = document.getElementById("display-modal");
    const span = document.getElementById("close-display");
  

    // When the user clicks on <span> (x), close the modal
    span.addEventListener("click", function () {
    modal.classList.toggle("fade-out")
    setTimeout(function(){
      modal.style.display = "none";
      modal.classList.toggle("fade-out")
     }, 2500);
  
    });
  
  
  }


  
  function initBoard() {
  
    // When the user clicks on the board, show first letter
    boardContainerEl.addEventListener("click", function () {
      console.log("show first letter");
      console.log("word = " + wordle)
    });
  
  
  }





 

  function displayItems() {
    //    messageContainerEl.innerText = "Current category is " + wordsArray[randomArray].cat;
    console.log("reached displayItems")
    let yourCategoryEl = document.getElementById("custom")
    const displaysEl = document.querySelector(".displays")
    const wordEl = document.getElementById("word")

   
  
  
    messageContainerEl.innerText = ("");
    
   
  
    let displayedInfoEl = document.getElementById("display-modal")
  //  let newCategoryEl = document.getElementById("new-category")
   
  //  newCategoryEl.innerText = protoWordsArray[itemToDel].cat
    displayedInfoEl.style.display = "block"
  
    const displayTrayEl = document.getElementById("display-tray")
    displayTrayEl.innerText = "";
    
 // for(var i = 0; i <  wordsArray[randomArray].items.length; i++)
  for(var i = 0; i <  protoWordsArray[numofLetters-5].items.length; i++)
  {
  
    // create a div for each word
    displayItemEl = document.createElement('div')
    displayItemEl.innerText = protoWordsArray[numofLetters-5].items[i]
    displayTrayEl.appendChild(displayItemEl)
  
  
  }
  


      displayItemEl = document.createElement('div')
      displayItemEl.innerText = "*****"
      displayTrayEl.appendChild(displayItemEl)
     
      displayItemEl = document.createElement('div')
      displayItemEl.innerText = "*****"
      displayTrayEl.appendChild(displayItemEl)

      displayItemEl = document.createElement('div')
      displayItemEl.innerText = "*****"
      displayTrayEl.appendChild(displayItemEl)

      
      displayItemEl = document.createElement('div')
      displayItemEl.innerText = "*****"
      displayTrayEl.appendChild(displayItemEl)
     
      displayItemEl = document.createElement('div')
      displayItemEl.innerText = "*****"
      displayTrayEl.appendChild(displayItemEl)

      displayItemEl = document.createElement('div')
      displayItemEl.innerText = "*****"
      displayTrayEl.appendChild(displayItemEl)

      
      displayItemEl = document.createElement('div')
      displayItemEl.innerText = "*****"
      displayTrayEl.appendChild(displayItemEl)
     
      displayItemEl = document.createElement('div')
      displayItemEl.innerText = "*****"
      displayTrayEl.appendChild(displayItemEl)

      displayItemEl = document.createElement('div')
      displayItemEl.innerText = "*****"
      displayTrayEl.appendChild(displayItemEl)

      

      wordEl.innerText = `${protoWordsArray[numofLetters-5].items.length} ${numofLetters}-Letter WORDS` 

      let numOfColumns = 5;
      if(numofLetters > 5){
        numOfColumns = 4;
      }
      if(numofLetters > 7){
        numOfColumns = 3;
      }   
      if(numofLetters > 9){
        numOfColumns = 2;
      }



      displayTrayEl.style.gridTemplateColumns = 'repeat(' + numOfColumns + ', 1fr)'
  displaysEl.style.display = "block";
  }


